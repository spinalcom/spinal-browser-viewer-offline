{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "../spinal-lib-forgefile/endPoint.js",
    "../spinal-lib-forgefile/forgefile.js"
  ],
  "names": [],
  "mappings": "AAAA;6pBCoBI,EAAA,SAAA,GAC0C,SAAhC,sPAMX,OAHG,EAAA,UACA,QAFF,WAID,EAPyD,qCAS5D,OATA,oBAAI,2BAYA,IAAA,EAAA,SAAA,GAC8B,SAApB,0MAGV,EAAc,IAAA,EAYf,OAXG,EAAA,UACA,SAAQ,EACR,QAHY,EAIZ,GAAA,GACA,MAAO,GACP,MAAA,GACA,SAAM,GACN,KAAA,KAAA,MACA,aAAW,EACX,UAAW,IAAA,IAAA,GAVb,eAYD,EAhBmC,0BAkBtC,OAlBA,SAAI;;;m8BCfA,EAAA,SAAA,GACkB,SAAA,yBAAA,0LAgBnB,OAbG,IACD,MAEC,OAAA,MAAA,EAAc,EAAd,UAAA,KACD,EAAA,KAAA,WAEC,OAAA,MAAA,EAAA,EAAA,UAAA,KACD,EAAA,KAAA,KAEC,EAAA,UACA,KAAM,EAAO,KAFf,KAAA,EAAA,OAXkB,EAAA,MAAA,EAAA,KAgBnB,EAjBmE,iDAAlE,EAAA,2BAAA,IAAA,YAoBA,MAAK,SAAe,GACrB,KAAA,UAAA,KAAA,MArBC,IAAA,eAwBA,MAAA,SAAA,GACD,OAAA,MAzBH,yBAAI,gCA8BA,IAAA,EAAA,SAAA,GAC+B,SAArB,gPAGR,GACA,MAAA,EACA,WAAW,EACX,aACA,KAAA,EACA,SAAO,IAAI,KAMX,MAZQ,IAAA,OAAA,GAAA,UAAA,YAAA,sBAAA,qBAAA,4BAAA,cAAA,wBAAA,mBAAA,WAaR,IAAA,GACA,WAdQ,EAeR,MAAA,GAfF,WAAA,IAkBD,OApBgC,EAAA,SAAA,GAoBhC,EArB6C,sCAA5C,EAAA,gBAAA,IAAA,YAuBA,MAAK,SAAe,GACrB,KAAA,UAAA,KAAA,MAxBC,IAAA,eA0BA,MAAA,SAAsB,GACvB,OAAA,aAAA,MA3BH,cAAI,qBAiCA,IAAA,EAAA,SAAA,GACY,SAAA,0JAUb,OAPG,EAAI,UACJ,GAAA,GACA,KAAA,GACA,MAAA,GACA,SAAU,GACV,SAAA,GANF,eAQD,EAXuC,mCAA1C,WAAI,kBAmBA,IAAA,EAAA,SAAA,GAC8B,SAApB,8MAeX,OAXG,EAAI,UACJ,GAAA,GACA,MAAO,GACP,MAAO,GACP,MAAA,GACA,SAAM,GACN,KAAA,KAAW,MACX,aACA,SACA,MAAA,EAVF,MAAA,IAAA,YAYD,EAhBqC,kCAAxC,UAAI,iBAqBA,IAAA,EAAA,SAAA,GACY,SAAA,kKASb,OANG,EAAI,UACJ,GAAA,GACA,SAHY,GAIZ,MAAA,GACA,QAAM,GALR,KAAA,KAOD,EAV2C,qCAA9C,aAAI,oBAgBA,IAAA,EAAA,SAAA,GACgB,SAAA,UAAA,6IAUjB,OAPG,EAAI,UACJ,GAAA,GACA,SAHY,GAIZ,MAAM,GACN,KAAM,GACN,KAAM,GANR,KAAA,IAAA,OAQD,EAXqC,2BAaxC,OAbA,UAAI,GAgBF,SAAK,WAAW,GACd,IAAA,IAAO,KAAP,EACD,OAAA,QAAA,GAAA,EAAA,GAJH,EAAA,UAAA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()",
    "// Copyright 2015 SpinalCom  www.spinalcom.com\n\n// This file is part of SpinalCore.\n\n// SpinalCore is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// Soda is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n// You should have received a copy of the GNU General Public License\n// along with Soda. If not, see <http://www.gnu.org/licenses/>.\n\n\nvar exports = module.exports = {};\n\n\nvar endpoint_TimeSeries = class endpoint_TimeSeries extends Model {\n  constructor(name = \"end point time series\") {\n    super();\n    this.add_attr({\n      time: [], // timestamp list\n      value: [] // value\n    });\n  }\n};\nexports.endpoint_TimeSeries = endpoint_TimeSeries;\n\n\nvar endPoint = class endPoint extends Model {\n  constructor(name = \"End point\") {\n    super();\n    var timeserie = new endpoint_TimeSeries();\n    this.add_attr({\n      display: false,\n      on_off: false,\n      id: '',\n      title: '',\n      color: '',\n      username: '',\n      date: Date.now(),\n      currentValue: 0,\n      TimeSerie: new Ptr(timeserie),\n      allObject: []\n    });\n  }\n};\nexports.endPoint = endPoint;",
    "// Copyright 2015 SpinalCom  www.spinalcom.com\n\n// This file is part of SpinalCore.\n\n// SpinalCore is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// Soda is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n// You should have received a copy of the GNU General Public License\n// along with Soda. If not, see <http://www.gnu.org/licenses/>.\nvar exports = module.exports = {};\n\nvar ForgeFileDerivativesItem = class ForgeFileDerivativesItem extends Model {\n  constructor(params) {\n    super();\n    if (!params) {\n      params = {};\n    }\n    if ((params != null ? params.name : void 0) == null) {\n      params.name = \"unnamed\";\n    }\n    if ((params != null ? params.path : void 0) == null) {\n      params.path = \".\";\n    }\n    this.add_attr({\n      name: params.name,\n      path: params.path\n    });\n    this._name = this.name;\n  }\n\n  add_child(child) {\n    this._children.push(child);\n  }\n\n  accept_child(ch) {\n    return false;\n  }\n};\n\nexports.ForgeFileDerivativesItem = ForgeFileDerivativesItem;\n\nvar ForgeFileItem = class ForgeFileItem extends Model {\n  constructor(name = \"Forge File\") {\n    super();\n    let tmp = {\n      _name: name,\n      _viewable: false,\n      _children: [],\n      name: name,\n      filepath: new Path(),\n      state: new Choice(0, [\"Initial\",\n        \"Uploading\", \"Uploading completed\",\n        \"Uploading to forge\", \"Upload to forge completed\",\n        \"Translating\", \"Translating completed\",\n        \"Export completed\", \"Failed\"\n      ]),\n      urn: \"\",\n      ask_token: false,\n      oauth: \"\",\n      bucket_key: \"\"\n    };\n    this.add_attr(tmp);\n  }\n  add_child(child) {\n    this._children.push(child);\n  }\n  accept_child(ch) {\n    return (ch instanceof ForgeFileDerivativesItem);\n  }\n};\n\nexports.ForgeFileItem = ForgeFileItem;\n\n\nvar ThemeModel = class ThemeModel extends Model {\n  constructor() {\n    super()\n    this.add_attr({\n      id: \"\",\n      name: \"\",\n      owner: \"\",\n      username: \"\",\n      creation: \"\",\n      listModel: []\n    })\n  }\n\n\n}\n\nexports.ThemeModel = ThemeModel;\n\n\nvar NoteModel = class NoteModel extends Model {\n  constructor(name = \"NoteModel\") {\n    super();\n\n    this.add_attr({\n      id: '',\n      title: '',\n      color: '',\n      owner: '',\n      username: '',\n      date: Date.now(),\n      allObject: [],\n      notes: [],\n      view: false,\n      files: new Directory()\n    });\n  }\n};\n\nexports.NoteModel = NoteModel;\n\nvar MessageModel = class MessageModel extends Model {\n  constructor() {\n    super();\n    this.add_attr({\n      id: '',\n      username: '',\n      owner: '',\n      message: '',\n      date: ''\n    });\n  }\n};\n\nexports.MessageModel = MessageModel;\n\n\nvar FileModel = class FileModel extends Model {\n  constructor(file) {\n    super();\n    this.add_attr({\n      id: '',\n      username: '',\n      owner: '',\n      name: '',\n      date: '',\n      path: new Path()\n    });\n  }\n};\nexports.FileModel = FileModel;\n//require('./bimTree');\nfunction concat_lib(lib) {\n  for (var key in lib) {\n    module.exports[key] = lib[key];\n  }\n}\nconcat_lib(require(\"./endPoint.js\"));"
  ]
}