{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "../spinal-lib-forgefile/forgefile.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()",
    "// Copyright 2015 SpinalCom  www.spinalcom.com\n\n// This file is part of SpinalCore.\n\n// SpinalCore is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// Soda is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n// You should have received a copy of the GNU General Public License\n// along with Soda. If not, see <http://www.gnu.org/licenses/>.\nvar exports = module.exports = {};\n\nfunction modelRdy_defer(model, promise) {\n  if (!model._server_id || FileSystem._tmp_objects[model._server_id]) {\n    setTimeout(() => {\n      modelRdy_defer(model, promise);\n    }, 200);\n    return;\n  }\n  promise(model);\n}\n\nfunction waitModelReady(model) {\n  return new Promise(function (resolve, reject) {\n    modelRdy_defer(model, resolve);\n  });\n}\n\nvar ForgeFileDerivativesItem = class ForgeFileDerivativesItem extends Model {\n  constructor(params) {\n    super();\n    if (!params) {\n      params = {};\n    }\n    if ((params != null ? params.name : void 0) == null) {\n      params.name = \"unnamed\";\n    }\n    if ((params != null ? params.path : void 0) == null) {\n      params.path = \".\";\n    }\n    this.add_attr({\n      name: params.name,\n      path: params.path\n    });\n    this._name = this.name;\n  }\n\n  add_child(child) {\n    this._children.push(child);\n  }\n\n  accept_child(ch) {\n    return false;\n  }\n};\n\nexports.ForgeFileDerivativesItem = ForgeFileDerivativesItem;\n\nvar ForgeFileItem = class ForgeFileItem extends Model {\n  constructor(name = \"Forge File\") {\n    super();\n    let tmp = {\n      _name: name,\n      _viewable: false,\n      _children: [],\n      name: name,\n      filepath: new Path(),\n      state: new Choice(0, [\"Initial\",\n        \"Uploading\", \"Uploading completed\",\n        \"Uploading to forge\", \"Upload to forge completed\",\n        \"Translating\", \"Translating completed\",\n        \"Export completed\", \"Failed\"\n      ]),\n      urn: \"\",\n      ask_token: false,\n      oauth: \"\",\n      bucket_key: \"\"\n    };\n    this.add_attr(tmp);\n  }\n  add_child(child) {\n    this._children.push(child);\n  }\n  accept_child(ch) {\n    return (ch instanceof ForgeFileDerivativesItem);\n  }\n};\n\nexports.ForgeFileItem = ForgeFileItem;\n\n\nvar ThemeModel = class ThemeModel extends Model {\n  constructor() {\n    super();\n    this.add_attr({\n      name: \"\",\n      owner: \"\",\n      username: \"\",\n      creation: Date.now(),\n      listModel: []\n    });\n  }\n\n  get_obj() {\n    let _self = this;\n    return new Promise((resolve, reject) => {\n      waitModelReady(_self).then(() => {\n        let obj = {\n          name: _self.name.get(),\n          owner: _self.owner.get(),\n          username: _self.username.get(),\n          creation: _self.creation.get(),\n          _server_id: _self._server_id\n        };\n        let listModel = [], i = 0;\n        for (; i < _self.listModel.length; i++) {\n          console.log(\"TEST\");\n          console.log(_self.listModel[i]);\n          listModel.push(_self.listModel[i].get_obj());\n          console.log(\"TEST2\");\n        }\n        Promise.all(listModel).then(function (res) {\n          obj.listModel = res;\n          resolve(obj);\n        });\n      });\n    });\n  }\n};\nexports.ThemeModel = ThemeModel;\n\nvar NoteModel = class NoteModel extends Model {\n  constructor(name = \"NoteModel\") {\n    super();\n\n    this.add_attr({\n      title: '',\n      color: '',\n      owner: '',\n      username: '',\n      date: Date.now(),\n      allObject: [],\n      notes: [],\n      display: false,\n      files: new Directory()\n    });\n  }\n\n  get_obj() {\n    let _self = this;\n    return new Promise(function (resolve, reject) {\n      waitModelReady(_self).then(function () {\n        let obj = {\n          title: _self.title.get(),\n          color: _self.color.get(),\n          owner: _self.owner.get(),\n          username: _self.username.get(),\n          date: _self.date.get(),\n          display: _self.display.get(),\n          files: _self.files.get(),\n          _server_id: _self._server_id\n        };\n        let allObject = [], notes = [], i = 0;\n        for (; i < _self.allObject.length; i++) {\n          allObject.push(_self.allObject[i].get_obj());\n        }\n        for (i = 0; i < _self.notes.length; i++) {\n          notes.push(_self.notes[i].get_obj());\n        }\n\n        Promise.all(allObject).then(function (object) {\n          obj.allObject = object;\n          Promise.all(notes).then(function (note) {\n            obj.notes = note;\n            resolve(obj);\n          });\n        });\n      });\n    });\n  }\n};\nexports.NoteModel = NoteModel;\n\nvar MessageModel = class MessageModel extends Model {\n  constructor() {\n    super();\n    this.add_attr({\n      username: '',\n      owner: '',\n      message: '',\n      date: Date.now()\n    });\n  }\n\n  get_obj() {\n    let _self = this;\n    return new Promise((resolve, reject) => {\n      waitModelReady(_self).then(() => {\n        let obj = {\n          username: _self.username.get(),\n          owner: _self.owner.get(),\n          message: _self.message.get(),\n          date: _self.date.get(),\n          _server_id: _self._server_id\n        };\n        resolve(obj);\n      });\n    });\n\n  }\n};\n\nexports.MessageModel = MessageModel;\n\n\nvar FileModel = class FileModel extends Model {\n  constructor(file) {\n    super();\n    this.add_attr({\n      username: '',\n      owner: '',\n      name: '',\n      date: '',\n      path: new Path()\n    });\n  }\n\n  get_obj() {\n    let _self = this;\n    return new Promise((resolve, reject) => {\n      waitModelReady(_self).then(() => {\n        let obj = {\n          username: _self.username.get(),\n          owner: _self.owner.get(),\n          name: _self.name.get(),\n          date: _self.date.get(),\n          _server_id: _self._server_id\n        };\n        resolve(obj);\n      });\n    });\n  }\n};\nexports.FileModel = FileModel;\n"
  ]
}