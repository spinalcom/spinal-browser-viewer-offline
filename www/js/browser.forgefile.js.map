{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "../spinal-lib-forgefile/forgefile.js"
  ],
  "names": [],
  "mappings": "AAAA;m8BCkBE,SAAK,eAAD,EAAqB,GACvB,EAAA,aAAiB,WAAA,aAAA,EAAA,YAMpB,EAAA,GALK,WAAA,WADF,eAAA,EAAA,IAGA,KAWA,IAAA,EAAA,SAAA,GACkB,SAAA,yBAAA,0LAgBnB,OAbG,IACD,MAEC,OAAA,MAAA,EAAc,EAAd,UAAA,KACD,EAAA,KAAA,WAEC,OAAA,MAAA,EAAA,EAAA,UAAA,KACD,EAAA,KAAA,KAEC,EAAA,UACA,KAAM,EAAO,KAFf,KAAA,EAAA,OAXkB,EAAA,MAAA,EAAA,KAgBnB,EAjBmE,iDAAlE,EAAA,2BAAA,IAAA,YAoBA,MAAK,SAAe,GACrB,KAAA,UAAA,KAAA,MArBC,IAAA,eAwBA,MAAA,SAAA,GACD,OAAA,MAzBH,yBAAI,gCA8BA,IAAA,EAAA,SAAA,GAC+B,SAArB,gPAGR,GACA,MAAA,EACA,WAAW,EACX,aACA,KAAA,EACA,SAAO,IAAI,KAMX,MAZQ,IAAA,OAAA,GAAA,UAAA,YAAA,sBAAA,qBAAA,4BAAA,cAAA,wBAAA,mBAAA,WAaR,IAAA,GACA,WAdQ,EAeR,MAAA,GAfF,WAAA,IAkBD,OApBgC,EAAA,SAAA,GAoBhC,EArB6C,sCAA5C,EAAA,gBAAA,IAAA,YAuBA,MAAK,SAAe,GACrB,KAAA,UAAA,KAAA,MAxBC,IAAA,eA0BA,MAAA,SAAsB,GACvB,OAAA,aAAA,MA3BH,cAAI,oNAnCF,SAAmB,GACjB,OAAA,IAAA,QAAe,SAAO,EAAtB,GADF,eAAA,EAAA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()",
    "// Copyright 2015 SpinalCom  www.spinalcom.com\n\n// This file is part of SpinalCore.\n\n// SpinalCore is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// Soda is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n// You should have received a copy of the GNU General Public License\n// along with Soda. If not, see <http://www.gnu.org/licenses/>.\nvar exports = module.exports = {};\n\nfunction modelRdy_defer(model, promise) {\n  if (!model._server_id || FileSystem._tmp_objects[model._server_id]) {\n    setTimeout(() => {\n      modelRdy_defer(model, promise);\n    }, 200);\n    return;\n  }\n  promise(model);\n}\n\nfunction waitModelReady(model) {\n  return new Promise(function (resolve, reject) {\n    modelRdy_defer(model, resolve);\n  });\n}\n\nvar ForgeFileDerivativesItem = class ForgeFileDerivativesItem extends Model {\n  constructor(params) {\n    super();\n    if (!params) {\n      params = {};\n    }\n    if ((params != null ? params.name : void 0) == null) {\n      params.name = \"unnamed\";\n    }\n    if ((params != null ? params.path : void 0) == null) {\n      params.path = \".\";\n    }\n    this.add_attr({\n      name: params.name,\n      path: params.path\n    });\n    this._name = this.name;\n  }\n\n  add_child(child) {\n    this._children.push(child);\n  }\n\n  accept_child(ch) {\n    return false;\n  }\n};\n\nexports.ForgeFileDerivativesItem = ForgeFileDerivativesItem;\n\nvar ForgeFileItem = class ForgeFileItem extends Model {\n  constructor(name = \"Forge File\") {\n    super();\n    let tmp = {\n      _name: name,\n      _viewable: false,\n      _children: [],\n      name: name,\n      filepath: new Path(),\n      state: new Choice(0, [\"Initial\",\n        \"Uploading\", \"Uploading completed\",\n        \"Uploading to forge\", \"Upload to forge completed\",\n        \"Translating\", \"Translating completed\",\n        \"Export completed\", \"Failed\"\n      ]),\n      urn: \"\",\n      ask_token: false,\n      oauth: \"\",\n      bucket_key: \"\"\n    };\n    this.add_attr(tmp);\n  }\n  add_child(child) {\n    this._children.push(child);\n  }\n  accept_child(ch) {\n    return (ch instanceof ForgeFileDerivativesItem);\n  }\n};\n\nexports.ForgeFileItem = ForgeFileItem;\n\n\n// var ThemeModel = class ThemeModel extends Model {\n//   constructor() {\n//     super();\n//     this.add_attr({\n//       name: \"\",\n//       owner: \"\",\n//       username: \"\",\n//       creation: Date.now(),\n//       viewAll : false,\n//       listModel: []\n//     });\n//   }\n\n//   get_obj() {\n//     let _self = this;\n//     return new Promise((resolve, reject) => {\n//       waitModelReady(_self).then(() => {\n//         let obj = {\n//           name: _self.name.get(),\n//           owner: _self.owner.get(),\n//           username: _self.username.get(),\n//           creation: _self.creation.get(),\n//           viewAll : _self.viewAll.get(),\n//           _server_id: _self._server_id\n//         };\n//         let listModel = [], i = 0;\n//         for (; i < _self.listModel.length; i++) {\n//           listModel.push(_self.listModel[i].get_obj());\n//         }\n//         Promise.all(listModel).then(function (res) {\n//           obj.listModel = res;\n//           resolve(obj);\n//         });\n//       });\n//     });\n//   }\n// };\n// exports.ThemeModel = ThemeModel;\n\n// var NoteModel = class NoteModel extends Model {\n//   constructor(name = \"NoteModel\") {\n//     super();\n\n//     this.add_attr({\n//       title: '',\n//       color: '',\n//       owner: '',\n//       username: '',\n//       date: Date.now(),\n//       allObject: [],\n//       notes: [],\n//       display: false,\n//       files: new Directory(),\n//       links : [],\n//     });\n//   }\n\n//   get_obj() {\n//     let _self = this;\n//     return new Promise(function (resolve, reject) {\n//       waitModelReady(_self).then(function () {\n//         let obj = {\n//           title: _self.title.get(),\n//           color: _self.color.get(),\n//           owner: _self.owner.get(),\n//           username: _self.username.get(),\n//           date: _self.date.get(),\n//           display: _self.display.get(),\n//           // files: _self.files.get(),\n//           // allObject : _self.allObject.get(),\n//           _server_id: _self._server_id\n//         };\n//         let allObject = [], notes = [], files = [], links = [], i = 0;\n        \n//         for (i = 0; i < _self.notes.length; i++) {\n//           notes.push(_self.notes[i].get_obj());\n//         }\n\n//         for (i = 0; i < _self.files.length; i++) {\n//           files.push(waitModelReady(_self.files[i]));\n//         }\n\n//         for (i = 0; i < _self.links.length; i++) {\n//           links.push(waitModelReady(_self.links[i].get_obj()));\n//         }\n\n//         for (let index = 0; index < _self.allObject.length; index++) {\n//           const element = _self.allObject[index];\n//           allObject.push(waitModelReady(element));\n//         }\n//         Promise.all(links).then(function (links) {\n//           obj.links = links;\n//           Promise.all(allObject).then(function (objects) {\n//             obj.allObject = objects;\n\n//             Promise.all(files).then(function (files) {\n//               obj.files = files;\n//               Promise.all(notes).then(function (note) {\n//                 obj.notes = note;\n//                 resolve(obj);\n//               });\n//             });\n//           });\n//         })\n//       });\n//     });\n//   }\n// };\n// exports.NoteModel = NoteModel;\n\n\n\n// var LinkModel = class LinkModel extends Model {\n//   constructor() {\n//     super()\n//     this.add_attr({\n//       label : \"\",\n//       link : \"\",\n//       owner : \"\",\n//       username : \"\"\n//     })\n//   }\n\n//   get_obj() {\n//     let _self = this;\n\n//     return new Promise((resolve,reject) => {\n//       waitModelReady(_self).then(() => {\n//         let obj = {\n//           label : _self.label.get(),\n//           link : _self.link.get(),\n//           owner : _self.owner.get(),\n//           username : _self.username.get(),\n//           _server_id: _self._server_id\n//         }\n\n//         resolve(obj);\n//       })\n//     })\n//   }\n// }\n\n\n// var MessageModel = class MessageModel extends Model {\n//   constructor() {\n//     super();\n//     this.add_attr({\n//       username: '',\n//       owner: '',\n//       message: '',\n//       date: Date.now()\n//     });\n//   }\n\n//   get_obj() {\n//     let _self = this;\n//     return new Promise((resolve, reject) => {\n//       waitModelReady(_self).then(() => {\n//         let obj = {\n//           username: _self.username.get(),\n//           owner: _self.owner.get(),\n//           message: _self.message.get(),\n//           date: _self.date.get(),\n//           _server_id: _self._server_id\n//         };\n//         resolve(obj);\n//       });\n//     });\n\n//   }\n// };\n\n// exports.MessageModel = MessageModel;\n\n\n// var FileModel = class FileModel extends Model {\n//   constructor(file) {\n//     super();\n//     this.add_attr({\n//       username: '',\n//       owner: '',\n//       name: '',\n//       date: '',\n//       path: new Path()\n//     });\n//   }\n\n//   get_obj() {\n//     let _self = this;\n//     return new Promise((resolve, reject) => {\n//       waitModelReady(_self).then(() => {\n//         let obj = {\n//           username: _self.username.get(),\n//           owner: _self.owner.get(),\n//           name: _self.name.get(),\n//           date: _self.date.get(),\n//           _server_id: _self._server_id\n//         };\n//         resolve(obj);\n//       });\n//     });\n//   }\n// };\n// exports.FileModel = FileModel;\n"
  ]
}