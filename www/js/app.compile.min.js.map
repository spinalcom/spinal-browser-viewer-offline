{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "app/app.config.js",
    "app/app.js",
    "app/app.route.js",
    "app/controllers/forgeViewerCtrl.js",
    "app/controllers/loginCtrl.js",
    "app/controllers/mainCtrl.js",
    "app/controllers/navbarCtrl.js",
    "app/directives/navbar.js",
    "app/run/plugin-annotation.js",
    "app/services/authService.js",
    "app/services/goldenLayoutService.js",
    "app/services/spinalCore.js",
    "app/services/spinalModelDictionary.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()",
    "angular.module('settings', [])\n  .constant('config', {\n    main_path: '/',\n    spinalhub_url: '127.0.0.1',\n    spinalhub_port: '8888',\n    spinalhub_user: '168',\n  });",
    "angular.module('app.route', ['ngRoute']);\nangular.module('app.services', []);\nangular.module('app.directives', []);\nangular.module('app.controllers', []);\nangular.module('app.spinalcom', ['settings', 'ngMaterial']);\nangular.module('app.spinalforge.plugin', []);\n\nangular.module('SpinalApp', ['ngAnimate', 'ngMaterial', 'app.directives', 'app.route',\n    'app.services', 'app.controllers', 'ngMdIcons', 'settings', 'app.spinalcom', 'app.spinalforge.plugin', \"colorpicker.module\"\n  ])\n  .run(['$rootScope', '$location', 'authService', function ($rootScope, $location, authService) {\n    let user = authService.get_user();\n    $rootScope.$on('$routeChangeStart', function (event, next, current) {\n      if (next.$$route.authenticate) {\n        if (!authService.is_Connected()) {\n          authService.login(user.username, user.password)\n            .then(function () {},\n              function () {\n                $location.path('/login');\n              });\n        }\n      }\n    });\n  }])\n\n\n  .config([\"$mdThemingProvider\", function ($mdThemingProvider) {\n    $mdThemingProvider.theme('altTheme')\n      .primaryPalette('grey', {\n        'default': '200'\n      })\n      .accentPalette('grey', {\n        'default': '700'\n      })\n      .dark();\n    $mdThemingProvider.theme('default')\n      .dark();\n\n    $mdThemingProvider.setDefaultTheme('altTheme');\n    $mdThemingProvider.alwaysWatchTheme(true);\n  }]).run([\"$templateCache\", \"$http\", function ($templateCache, $http) {\n    let load_template = (uri, name) => {\n      $http.get(uri).then((response) => {\n        $templateCache.put(name, response.data);\n      }, (errorResponse) => {\n        console.log('Cannot load the file ' + uri);\n      });\n    };\n    let toload = [{\n      uri: 'app/templates/forgeviewer.html',\n      name: 'forgeviewer.html'\n    }];\n    for (var i = 0; i < toload.length; i++) {\n      load_template(toload[i].uri, toload[i].name);\n    }\n\n    // $templateCache.put('templateId.html', 'This is the content of the template');\n  }]);",
    "angular.module('app.route')\n  .config([\"$routeProvider\", \"$locationProvider\",\n    function ($routeProvider, $locationProvider) {\n      $routeProvider\n\n        .when(\"/viewer/:filepath\", {\n          templateUrl: \"app/templates/main.html\",\n          authenticate: true,\n          controller: 'mainCtrl'\n        })\n        .when(\"/login\", {\n          templateUrl: \"app/templates/login.html\",\n          authenticate: false,\n          controller: 'loginCtrl'\n        })\n        .when('/404', {\n          authenticate: false,\n          controller: ['$location', function ($location) {\n            $location.replace('/drive/');\n          }]\n        }).otherwise({\n          redirectTo: '/404'\n        });\n\n      // .otherwise({\n      //   redirectTo: '/viewer'\n      // });\n    }\n  ]);",
    "angular.module('app.spinalforge.plugin')\n  .controller('forgeViewerCtrl', [\"$scope\", \"$rootScope\", \"$mdDialog\", \"authService\", \"$compile\", \"$injector\", \"layout_uid\", \"spinalModelDictionary\",\n    function ($scope, $rootScope, $mdDialog, authService, $compile, $injector, layout_uid, spinalModelDictionary) {\n      $scope.injector = $injector;\n      $scope.uid = layout_uid.get();\n\n      $rootScope.allNotes = [];\n      // load etc..\n      spinalModelDictionary.init().then(function (ForgeFile) {\n        var viewerApp, viewables, indexViewable, oViewer;\n\n        var config = {\n          inViewerSearchConfig: {\n            uiEnabled: true,\n            clientId: \"dsadsa\",\n            sessionId: \"F969EB70-242F-11E6-BDF4-0800200C9A66\",\n            loadedModelTab: {\n              enabled: true, // If false, the tab is hidden.\n              displayName: 'This View',\n              pageSize: 50\n            },\n            relatedItemsTab: {\n              enabled: true, // If false, the tab is hidden.\n              displayName: 'This Item',\n              pageSize: 20\n            }\n          },\n        };\n        var extensions = ['PannelAnnotation', \"Autodesk.ADN.Viewing.Extension.Color\"]\n\n        var options = {\n          env: 'Local',\n          'docid': \"\"\n        };\n        var docs = [];\n\n\n        var documentId = 'urn:' + ForgeFile.urn.get();\n\n\n        docs = ForgeFile._children.get();\n        if (docs.length != 0) {\n          var path = docs[0].path;\n          for (var i = 0; i < docs.length; i++) {\n            if (/.+\\.svf$/.test(docs[i].path)) {\n              path = docs[i].path;\n              break;\n            }\n          }\n          options.docid = path;\n        }\n        init_autodesk(documentId)\n\n        // get_oAuthToken(ForgeFile, documentId, init_autodesk);\n\n        // function get_oAuthToken(forgeFile, documentId, callback) {\n        //   forgeFile.oauth.set(\"\");\n        //   forgeFile.ask_token.set(true);\n        //   var ask_for_token = true;\n        //   var oauth_onchange = function () {\n        //     if (ask_for_token && forgeFile.oauth.get() != \"\") {\n        //       ask_for_token = false;\n        //       forgeFile.oauth.unbind(oauth_onchange);\n        //       options.accessToken = forgeFile.oauth.get();\n        //       callback(documentId);\n        //     }\n        //   };\n        //   forgeFile.oauth.bind(oauth_onchange);\n        // }\n\n        // function init_autodesk(documentId) {\n        //   Autodesk.Viewing.Initializer(options, function onInitialized() {\n        //     viewerApp = new Autodesk.Viewing.ViewingApplication('MyViewerDiv' + $scope.uid);\n        //     viewerApp.registerViewer(viewerApp.k3D, Autodesk.Viewing.Private.GuiViewer3D, config3d);\n        //     viewerApp.loadDocument(documentId, onDocumentLoadSuccess, onDocumentLoadFailure);\n        //   });\n        // }\n        function init_autodesk(documentId) {\n          oViewer = new Autodesk.Viewing.Private.GuiViewer3D($(\"#MyViewerDiv\" + $scope.uid)[0], config); // With toolbar\n\n          Autodesk.Viewing.Initializer(options, function onInitialized() {\n            oViewer.initialize();\n            console.log(options.docid);\n            oViewer.loadModel(options.docid, config, onItemLoadSuccess, onDocumentLoadFailure);\n            // for (var i = 0; i < docs.length; i++) {\n            //   var r = $('<div><button id=\"view_' + i + '\">' + docs[i].name + '<div><img id=\"img__' + i + '\" src=\"' + docs[i].path + '.png\"></div></button></div>');\n            //   $('#list').append(r);\n            //   $('#view_' + i).click(function (e) {\n            //     e.stopPropagation();\n            //     // oViewer.impl.unloadCurrentModel () ; API would be tearDown()/setUp() tearDown() unloads extensions too, so you need\n            //     // setUp() after that to load again setUp() requires the viewer configuration again, the one you use to start the\n            //     // viewer.\n            //     oViewer.tearDown();\n            //     oViewer.setUp({\n            //       env: 'Local'\n            //     });\n            //     var i = parseInt(e.target.id.substring(5));\n            //     oViewer.loadModel(docs[i].path, config, onItemLoadSuccess, onDocumentLoadFailure);\n            //     // oViewer.loadModel(docs[i].path);\n            //   });\n            // }\n\n            // viewerApp = new Autodesk.Viewing.ViewingApplication('MyViewerDiv');\n            // oViewer.registerViewer(oViewer.k3D, Autodesk.Viewing.Private.GuiViewer3D, config);\n            // viewerApp.loadDocument(documentId, onDocumentLoadSuccess, onDocumentLoadFailure);\n          });\n        }\n\n\n        // function onDocumentLoadSuccess(doc) {\n        //   viewables = viewerApp.bubble.search({\n        //     'type': 'geometry',\n        //     'role': '3d'\n        //   });\n        //   if (viewables.length === 0) {\n        //     console.error('Document contains no viewables.');\n        //     return;\n        //   }\n        //   viewerApp.selectItem(viewables[viewables.length - 1].data, onItemLoadSuccess, onItemLoadFail);\n        // }\n\n\n        function onDocumentLoadFailure(viewerErrorCode) {\n          console.error('onDocumentLoadFailure() - errorCode:' + viewerErrorCode);\n        }\n\n\n        function onItemLoadSuccess(viewer, item) {\n          viewer.scope = $scope;\n          // console.log('Viewers are equal: ' + (viewer === viewerApp.getCurrentViewer()));\n          oViewer.addEventListener(Autodesk.Viewing.GEOMETRY_LOADED_EVENT, function onGeometryLoadEvent() {\n            oViewer.removeEventListener(Autodesk.Viewing.GEOMETRY_LOADED_EVENT, onGeometryLoadEvent);\n            for (var i = 0; i < extensions.length; i++) {\n              oViewer.loadExtension(extensions[i], options)\n            }\n            // var spinalExtension = oViewer.getExtension(\"SpinalCom.Forge.Extension\");\n            // if (typeof spinalExtension != 'undefined')\n            //   spinalExtension.mainPanel.setBuilding(Building);\n          });\n\n\n        }\n\n\n        // function onItemLoadFail(errorCode) {\n        //   console.error('onItemLoadFail() - errorCode:' + errorCode);\n        // }\n\n      });\n\n\n    }\n  ]);",
    "angular.module('app.controllers')\n  .controller('loginCtrl', [\"$scope\", \"authService\", \"$mdToast\", \"$location\",\n    function ($scope, authService, $mdToast, $location) {\n      let toast = $mdToast.simple()\n        .hideDelay(3000);\n      let user = authService.get_user();\n      authService.logout();\n      $scope.conf = {\n        email: \"\",\n        password: \"\"\n      };\n      $scope.ConnectBtn = () => {\n        authService.login($scope.conf.email, $scope.conf.password).then(\n          () => {\n            $location.path('/home');\n          },\n          (err) => {\n            toast.textContent(err);\n            $mdToast.show(toast);\n          }\n        );\n      };\n\n    }\n  ]);",
    "angular.module('app.controllers')\n  .controller('mainCtrl', [\"$scope\", \"$routeParams\", \"goldenLayoutService\", \"spinalModelDictionary\",\n    function ($scope, $routeParams, goldenLayoutService, spinalModelDictionary) {\n      goldenLayoutService.init();\n    }\n  ]);",
    "angular.module('app.controllers')\n  .controller('navbarCtrl', [\"$scope\", \"authService\", \"$location\", \"$routeParams\",\n    function ($scope, authService, $location, $routeParams) {\n      $scope.username = \"\";\n      $scope.connected = false;\n      authService.wait_connect().then(() => {\n        $scope.username = authService.get_user().username;\n        $scope.connected = true;\n        $scope.viewer = $routeParams.filepath;\n        if ($scope.viewer) {\n          $scope.viewer = atob($scope.viewer);\n        } else {\n          $scope.viewer = \"viewer\";\n        }\n        console.log($routeParams.filepath);\n\n      });\n      $scope.logout = () => {\n        $location.path('/login');\n      };\n      // get in SpinalDrive_Env\n      $scope.layouts = [\n\n        {\n          id: \"drag-viewer\",\n          name: \"viewer\",\n          cfg: {\n            isClosable: true,\n            title: \"viewer\",\n            type: 'component',\n            componentName: 'SpinalHome',\n            componentState: {\n              template: 'forgeviewer.html',\n              controller: 'forgeViewerCtrl'\n            }\n          }\n        },\n\n\n      ];\n\n\n\n\n\n    }\n  ]);",
    "angular.module('app.directives')\n  .directive(\"navbar\", [\n    function () {\n      return {\n        restrict: 'E',\n        templateUrl: 'app/templates/navbar.html',\n        controller: 'navbarCtrl',\n      };\n    }\n  ])\n  .directive(\"menuGlayout\", ['goldenLayoutService', '$timeout',\n    function (goldenLayoutService, $timeout) {\n      return {\n        restrict: 'E',\n        scope: {\n          layoutInfo: '=info'\n        },\n        replace: true,\n        template: '<li ng-repeat=\\\"layout in layoutInfo\\\"  id=\\\"{{layout.id}}\\\"><a >{{layout.name}}</a></li>',\n        link: (scope, element, attrs) => {\n          goldenLayoutService.wait_ready().then(() => {\n            let create_callback = (goldenLayoutService, layout) => {\n              return () => {\n                goldenLayoutService.createChild(layout.cfg);\n              };\n            };\n            for (var i = 0; i < scope.layoutInfo.length; i++) {\n              let layout = scope.layoutInfo[i];\n              goldenLayoutService.createDragSource($(\"#\" + layout.id)[0], layout.cfg);\n              $(\"#\" + layout.id).click(create_callback(goldenLayoutService, layout));\n            }\n          });\n        }\n      };\n    }\n  ])\n  .directive('ngRightClick', [\"$parse\", function ($parse) {\n    return function (scope, element, attrs) {\n      var fn = $parse(attrs.ngRightClick);\n      element.bind('contextmenu', function (event) {\n        scope.$apply(function () {\n          event.preventDefault();\n          fn(scope, {\n            $event: event\n          });\n        });\n      });\n    };\n  }]);",
    "angular.module('app.spinalforge.plugin').run([\"spinalModelDictionary\", \"$mdDialog\", \"$mdToast\", \"authService\",\"$rootScope\",\"$compile\",\n  function (spinalModelDictionary, $mdDialog,$mdToast, authService,$rootScope,$compile) {\n\n    class PannelAnnotation {\n      constructor(viewer, options) {\n        Autodesk.Viewing.Extension.call(this, viewer, options);\n        \n        viewer.registerContextMenuCallback('rightClickMenu', (menu, status) => {\n          menu.push({\n            title : 'See Annotation',\n            target: () => {\n            var items = this.viewer.getSelection();          \n\n            if (items.length == 1) {\n              document.getElementById(\"search\").value = items[0];\n              var list = document.getElementById(\"allList\");\n\n              this.getContainer(items[0], (data) => {\n                this.changeContainer(list, data);\n              });\n            } else\n              alert(\"you must select 1 item\");\n            }\n          })\n      });\n\n      this.viewer = viewer;\n      this.panel = null;\n      this.user = authService.get_user();\n\n      //message panel\n      this.detailPanelContent = null;\n      this.detailPanel = null;\n\n      //files panel\n      this.filePanel = null;\n      this.filePanelContent = null;\n\n      this._selected = null; //item affiché dans le panel message\n      this._sel = null; // item selected\n      this._file_selected = null; //item affiché dans le panel fichiers\n\n\n      $rootScope.execute_func = (name,id,other = null) => {\n\n        switch (name) {\n          case \"addItem\":\n            this.AddItems(id)\n            break;\n\n          case \"changeColor\":\n            this.changeColorInHub(id);\n            break;\n\n          case \"view\":\n            this.viewOrHide(id);\n            break;\n\n          case \"rename\":\n            this.renameNote(id);\n            break;\n\n          case \"delete\":\n            this.deleteNoteItem(id,other);\n            break;\n\n          case \"info\":\n            this.DetailPanel(id);\n            break;\n          case \"selectItem\":\n            this.selectNote(id);\n            break;\n          case \"file\":\n            this.DisplayFilePanel(id);\n            break;\n          case \"download\":\n            this.DownloadFile(id);\n            break;\n          case \"delete_file\":\n            this.RemoveFile(id);\n            break;\n      \n        }\n      }\n\n    }\n\n    load() {\n      if (this.viewer.toolbar) {\n        this.createUI();\n      } else {\n        this.onToolbarCreatedBinded = this.onToolbarCreated.bind(this);\n        this.viewer.addEventListener(av.TOOLBAR_CREATED_EVENT, this.onToolbarCreatedBinded);\n      }\n      return true;\n    }\n\n    onToolbarCreated() {\n      this.viewer.removeEventListener(av.TOOLBAR_CREATED_EVENT, this.onToolbarCreatedBinded);\n      this.onToolbarCreatedBinded = null;\n      this.createUI();\n    }\n\n    unload() {\n      this.viewer.toolbar.removeControl(this.subToolbar);\n      return true;\n    }\n\n    createUI() {\n      var title = 'Annotation';\n      this.panel = new PanelClass(this.viewer, title);\n\n      this.initialize();\n\n      var button1 = new Autodesk.Viewing.UI.Button('Annotation');\n\n      button1.onClick = (e) => {\n        if (!this.panel.isVisible()) {\n          this.panel.setVisible(true);\n        } else {\n          this.panel.setVisible(false);\n        }\n      };\n\n      button1.addClass('fa');\n      button1.addClass('fa-pencil');\n      button1.addClass('fa-2x');\n      button1.setToolTip('Annotation');\n\n      this.subToolbar = new Autodesk.Viewing.UI.ControlGroup('my-Annotation');\n      this.subToolbar.addControl(button1);\n      this.viewer.toolbar.addControl(this.subToolbar);\n    }\n\n    initialize() {\n\n\n      this.panel.initializeMoveHandlers(this.panel.container);\n      this.panel.container.appendChild(this.panel.createScrollContainer());\n      var _container = this.panel.container;\n\n      var func_success = (data) => {\n\n        var container = _container;\n        var allNotes = data;\n        container.className += \" panelViewer\";\n\n\n        var div = document.createElement('div');\n        div.className = \"_container\";\n\n        \n\n        var con_header = document.createElement('div');\n        con_header.className = \"header\";\n\n\n        ////////////////////////////////////////////////\n        //             Button Add Note                //\n        ////////////////////////////////////////////////\n        var headerDiv = document.createElement('div');\n        headerDiv.className = \"spin row head\";\n\n        //create note button\n        var cDiv = document.createElement('div');\n        cDiv.className = \"col-sm-3 col-md-3 col-xs-3\";\n\n        var createNote = document.createElement('button');\n        createNote.className = \"btn btn-primary btn-sm btn-block\";\n        createNote.innerHTML = '<i class=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i> Note';\n\n        createNote.onclick = () => {\n          var confirm = $mdDialog.prompt()\n            .title('New Note')\n            .placeholder('Please enter the title')\n            .ariaLabel('New Note')\n            .clickOutsideToClose(true)\n            .required(true)\n            .ok('Create!')\n            .cancel('Cancel');\n          $mdDialog.show(confirm).then((result) => {\n            this.AddNote(result);\n          }, function () {});\n        };\n\n        //color all\n        var vDiv = document.createElement('div');\n        vDiv.className = \"col-sm-3 col-md-3 col-xs-3\"\n        var viewButton = document.createElement('button');\n        viewButton.className = \"btn btn-primary btn-sm btn-block\";\n        viewButton.innerHTML = '<i class=\"fa fa-eye\" aria-hidden=\"true\"></i> View';\n\n        viewButton.onclick = () => {\n          this.changeAllItemsColor();\n          this.changeAllIcon(\"fa-eye-slash\", \"true\");\n        };\n\n        //hide all\n        var hDiv = document.createElement('div');\n        hDiv.className = \"col-sm-3 col-md-3 col-xs-3\";\n        var hideButton = document.createElement('button');\n        hideButton.className = \"btn btn-primary btn-sm btn-block\";\n        hideButton.innerHTML = '<i class=\"fa fa-eye-slash\" aria-hidden=\"true\"></i> Hide';\n\n        //--------------------------------------------------------------------------------------------\n        hideButton.onclick = () => {\n          this.restoreAllItemsColor();\n          this.changeAllIcon(\"fa-eye\", \"false\");\n        };\n        //--------------------------------------------------------------------------------------------\n\n        ///////////////////////////////////////////////\n        //            Card List                      //\n        ///////////////////////////////////////////////\n        var list = document.createElement('div');\n        list.className = \"list-group allList\";\n        list.id = \"allList\";\n\n\n        \n        var items = document.createElement('div');\n        items.className = \"list-group allItems\";\n\n        ///////////////////////////////////////////////\n        //             Search Input                  //\n        ///////////////////////////////////////////////\n        var searchDiv = document.createElement('div');\n        searchDiv.className = \"spin input-group\";\n\n        var searchIcon = document.createElement('span');\n        searchIcon.className = \"icon input-group-addon\";\n        searchIcon.innerHTML = '<i class=\"fa fa-search\" aria-hidden=\"true\"></i>';\n\n        var search = document.createElement('input');\n        search.className = \"input form-control toolbar-search-box\";\n        search.type = \"number\";\n        search.id = \"search\";\n        search.placeholder = \"item id\";\n\n        search.onclick = function () {\n          search.focus();\n        };\n\n        search.oninput = () => {\n          if (search.value != \"\") {\n            this.getContainer(parseInt(search.value), (data) => {\n              this.changeContainer(list, data);\n            });\n          } else {\n            this.changeContainer(list, allNotes);\n          }\n        };\n\n        //button header\n        cDiv.appendChild(createNote);\n        vDiv.appendChild(viewButton);\n        hDiv.appendChild(hideButton);\n\n        headerDiv.appendChild(cDiv);\n        headerDiv.appendChild(vDiv);\n        headerDiv.appendChild(hDiv);\n\n        con_header.appendChild(headerDiv);\n\n        //search\n        searchDiv.appendChild(searchIcon);\n        searchDiv.appendChild(search);\n        con_header.appendChild(searchDiv);\n\n\n        \n\n        div.appendChild(con_header);\n        div.appendChild(list);\n        div.appendChild(items);\n\n\n        //list\n        container.appendChild(div);\n\n        ///////////////////////////////////////////////\n        //          When notes change                //\n        ///////////////////////////////////////////////\n        allNotes.bind(() => {\n          this.changeContainer(list ,allNotes);\n        });\n      };\n\n      spinalModelDictionary.init().then((m) => {\n        if (m) {\n          if (m.annotationPlugin) {\n            m.annotationPlugin.load((mod) => {\n              this.model = mod;\n              func_success(this.model);\n            });\n          } else {\n            this.model = new Lst();\n            m.add_attr({\n              annotationPlugin: new Ptr(this.model)\n            });\n\n            func_success(this.model);\n          }\n\n        }\n\n      });\n    }\n\n    AddNote(title, color = \"#000000\") {\n      var notes = this.model;\n      var id = newGUID();\n\n      var newNote = new NoteModel();\n      newNote.title.set(title);\n      newNote.color.set(color);\n      newNote.id.set(id);\n      newNote.date.set(Date.now());\n      newNote.owner.set(this.user.id);\n      newNote.username.set(this.user.username);\n\n      var otherNotes = notes;\n      otherNotes.push(newNote);\n      notes.mod_attr(otherNotes);\n    }\n\n    AddItems(id) {\n      var noteSelected, indexNote;\n      var items = this.viewer.getSelection();\n      var notes = this.model;\n\n\n      if (items.length == 0) {\n        alert('No model selected !');\n        return;\n      }\n\n      this.viewer.model.getBulkProperties(items, {\n        propFilter: ['name']\n      }, (models) => {\n\n        for (var i = 0; i < notes.length; i++) {\n          if (notes[i].id == id) {\n            noteSelected = notes[i].allObject;\n            indexNote = i;\n            break;\n          }\n        }\n\n        for (var j = 0; j < models.length; j++) {\n          noteSelected.push(models[j]);\n        }\n        notes[indexNote].allObject = noteSelected;\n\n        var toast = $mdToast.simple()\n        .content(\"Item added !\")\n        .action('OK')\n        .highlightAction(true)\n        .hideDelay(0)\n        .position('bottom right')\n        .parent(\"body\");\n\n        $mdToast.show(toast);\n      }, function () {\n        console.log(\"error\");\n      });\n\n\n    }\n\n    getContainer(id, callback) {\n      var notes = this.model;\n\n      var containers = notes.filter((element) => {\n\n        return element.allObject.filter(\n          (e) => {\n            return e.dbId.get() == id;\n          }\n        ).length > 0;\n      });\n      callback(containers);\n    }\n\n    changeColorInHub(id,color) {\n      \n      var noteSelected, indexNote;\n      var notes = this.model;\n\n      for (var i = 0; i < notes.length; i++) {\n        if (notes[i].id == id) {\n          notes[i].color.set(color);\n        }\n      }\n    }\n\n    changeItemColor(id) {\n      var ids = [];\n      var selected;\n      var notes = this.model;\n      for (var i = 0; i < notes.length; i++) {\n        if (notes[i].id == id) {\n          selected = notes[i];\n          for (var j = 0; j < selected.allObject.length; j++) {\n\n            ids.push(selected.allObject[j].dbId.get());\n          }\n        }\n      }\n      this.viewer.setColorMaterial(ids, selected.color.get(), selected.id.get());\n    }\n\n    restoreColor(id) {\n      var ids = [];\n      var selected;\n      var notes = this.model;\n      for (var i = 0; i < notes.length; i++) {\n        if (notes[i].id == id) {\n          selected = notes[i];\n          for (var j = 0; j < selected.allObject.length; j++) {\n            ids.push(selected.allObject[j].dbId.get());\n          }\n        }\n      }\n      this.viewer.restoreColorMaterial(ids, id);\n    }\n\n    changeAllItemsColor() {\n      var objects = [];\n      var notes = this.model;\n      for (var i = 0; i < notes.length; i++) {\n        var ids = [];\n        var color;\n        for (var j = 0; j < notes[i].allObject.length; j++) {\n          ids.push(notes[i].allObject[j].dbId.get());\n        }\n        color = notes[i].color.get();\n        objects.push({\n          ids: ids,\n          color: color,\n          id: notes[i].id\n        });\n      }\n      this.viewer.colorAllMaterials(objects);\n    }\n\n    restoreAllItemsColor() {\n      var objects = [];\n      var notes = this.model;\n      for (var i = 0; i < notes.length; i++) {\n        var ids = [];\n\n        for (var j = 0; j < notes[i].allObject.length; j++) {\n          ids.push(notes[i].allObject[j].dbId.get());\n        }\n        objects.push({\n          ids: ids,\n          id: notes[i].id\n        });\n      }\n      this.viewer.restoreAllMaterialColor(objects);\n    }\n\n    deleteNoteItem(note, item = null) {\n\n      var notes = this.model;\n\n\n      var dialog = $mdDialog.confirm()\n            .ok(\"Delete !\")\n            .title('Do you want to remove it?')\n            .cancel('Cancel')\n            .clickOutsideToClose(true);\n      \n            $mdDialog.show(dialog)\n            .then((result) => {\n              \n              if(item != null) {\n                for (let i = 0; i < notes.length; i++) {\n                  if(notes[i].id == note) {\n                    for(var j = 0; j < notes[i].allObject.length; j++){\n                      if(notes[i].allObject[j].dbId == item) {\n                          notes[i].allObject.splice(j,1);\n                          break;\n                      }\n                    }\n                  }\n                    \n                }\n              } else {\n                for (let i = 0; i < notes.length; i++) {\n                    if(notes[i].id == note){\n                        notes.splice(i,1);\n                        break;\n                    }\n                }\n              }\n\n            }, function(){});\n\n    }\n\n    changeAllIcon(iconName, show) {\n      var notes = this.model;\n\n      for (var i = 0; i < notes.length; i++) {\n        var element = document.getElementsByClassName(\"show\" + notes[i].id)[0];\n        element.innerHTML = `<i class=\"fa ${iconName}\" aria-hidden=\"true\"></i>`;\n        element.setAttribute(\"show\",show);\n      }\n    }\n\n    renameNote(id) {\n      var notes = this.model;\n\n      var confirm = $mdDialog.prompt()\n            .title('Rename Note')\n            .placeholder('Please enter the title')\n            .ariaLabel('Rename')\n            .clickOutsideToClose(true)\n            .required(true)\n            .ok('Rename')\n            .cancel('Cancel');\n            $mdDialog.show(confirm).then((result) => {\n              for (let i = 0; i < notes.length; i++) {\n                if(notes[i].id == id) {\n                    notes[i].title.set(result);\n                    break;\n                } \n              }\n            }, function () {});\n    }\n\n\n    selectNote(id) {\n      var notes = this.model;\n      this._sel = id;\n\n      var div = document.getElementsByClassName(\"allItems\")[0];\n      div.innerHTML = \"\";\n\n      var contener = angular.element(div);\n      \n      var header = angular.element('<div></div>')\n      var content = angular.element('<md-list>\\\n      </md-list>');\n\n      contener.append(header);\n      contener.append(content);\n      \n      \n      if(id != null) {\n        for (let i = 0; i < notes.length; i++) {\n          if(notes[i].id == id){\n            var selected = angular.element(`<h3>Note Selected : ${notes[i].title.get()}</h3>`);\n            header.append(selected);\n\n            if(notes[i].allObject.length > 0) {\n              for(let j = 0; j < notes[i].allObject.length; j++) {\n                var _ob =  `\n                  <md-list-item>\n                    <p>${notes[i].allObject[j].name.get()}</p>\n        \n                    <md-button class=\"i_btn\" aria-label=\"delete_item\" ng-click=\"execute_func('delete','${notes[i].id.get()}','${notes[i].allObject[j].dbId}')\">\n                      <i class=\"fa fa-trash\" aria-hidden=\"true\"></i>\n                    </md-button>\n                  </md-list-item>\n                `\n                content.append(_ob);\n              }\n            } else {\n              content.append('<h5>No item inside</h5>');\n            }\n          }\n        }\n      } else {\n        content.append('<h5>No item selected</h5>');\n      }\n\n      $compile(header)($rootScope);\n      $compile(content)($rootScope);\n\n    }\n\n\n    createitem(parent, note,i) {\n\n      var div = `<md-list-item>\n          <p class=\"noteTitle\" ng-click=\"execute_func('selectItem','${note.id.get()}')\">${note.title.get()}</p>\n\n          <md-button class=\"i_btn\" aria-label=\"add_item\" id=${note.id.get()} ng-click=\"execute_func('addItem','${note.id.get()}')\">\n            <i class=\"fa fa-plus\" aria-hidden=\"true\"></i>\n          </md-button>\n\n          <!-- <input class=\"i_btn input_color\" value=\"${note.color.get()}\" id=\"i_color\" type='color' name='${note.id.get()}' ng-change=\"execute_func('changeColor','${note.id.get()}')\" ng-model=\"color${i}\"/> -->\n          <input class=\"i_btn input_color\" value=\"${note.color.get()}\" id=\"i_color\" type='color' name='${note.id.get()}'/>\n\n          <md-button class=\"i_btn show${note.id.get()}\" id=${note.id.get()} aria-label=\"view\" ng-click=\"execute_func('view','${note.id.get()}')\" show=\"false\">\n            <i class=\"fa fa-eye\" aria-hidden=\"true\"></i>\n          </md-button>\n\n          <md-button class=\"i_btn\" id=${note.id.get()} aria-label=\"rename\" ng-click=\"execute_func('rename','${note.id.get()}')\">\n            <i class=\"fa fa-pencil\" aria-hidden=\"true\"></i>\n          </md-button>\n\n          <md-button class=\"i_btn\" id=${note.id.get()} aria-label=\"delete\" ng-click=\"execute_func('delete','${note.id.get()}')\">\n            <i class=\"fa fa-trash\" aria-hidden=\"true\"></i>\n          </md-button>\n\n          <md-button class=\"i_btn\" id=${note.id.get()} aria-label=\"info\" ng-click=\"execute_func('info','${note.id.get()}')\">\n            <i class=\"fa fa-comment\" aria-hidden=\"true\"></i>\n          </md-button>\n\n          <md-button class=\"i_btn\" id=${note.id.get()} aria-label=\"info\" ng-click=\"execute_func('file','${note.id.get()}')\">\n            <i class=\"fa fa-paperclip\" aria-hidden=\"true\"></i>\n          </md-button>\n\n        </md-list-item>`;\n\n        var contener = angular.element(div);\n\n        parent.append(contener);\n        $compile(contener)($rootScope);\n    }\n\n\n    viewOrHide(id) {\n\n      var element = document.getElementsByClassName(\"show\" + id)[0];\n      var show = element.getAttribute(\"show\");\n\n      if(show == \"false\") {\n        element.setAttribute(\"show\",\"true\");\n        this.changeItemColor(id);\n        element.innerHTML = '<i class=\"fa fa-eye-slash\" aria-hidden=\"true\"></i>';\n      } else {\n        this.restoreColor(id);\n        element.setAttribute(\"show\",\"false\");\n        element.innerHTML = '<i class=\"fa fa-eye\" aria-hidden=\"true\"></i>';\n        \n      }\n\n    }\n\n    //////////////////////////////////////////////////////////////\n    //                  Change container                        //\n    //////////////////////////////////////////////////////////////\n    changeContainer(list, allNotes) {\n      list.innerHTML = \"\";\n\n      var _self = this;\n      var contener = angular.element(list);\n\n      var div = angular.element('<md-list>\\\n      </md-list>');\n\n\n      contener.append(div);\n      $compile(div)($rootScope);\n      \n      if(allNotes.length > 0) {\n        for (let index = 0; index < allNotes.length; index++) {\n          const element = allNotes[index];\n          this.createitem(div,element,index);\n        }\n      } else {\n        div.append('<h1>No note created ! create one</h1>');\n      }\n\n      this.selectNote(this._sel);\n      var _self = this;\n      \n      var colors = document.getElementsByClassName(\"input_color\");\n\n      for (let j = 0; j < colors.length; j++) {\n        colors[j].onchange = function(){\n          _self.changeColorInHub(this.name, this.value);\n        }\n        \n      }\n\n    }\n\n    DetailPanel(id) {\n      var notes = this.model;\n\n\n      if(this.detailPanelContent == null){\n        this.detailPanelContent = document.createElement('div');\n        this.detailPanelContent.className = \"content\";\n      }\n\n      if(this.detailPanel == null) {\n        this.detailPanel = new PanelClass(this.viewer,id);\n        this.detailPanel.initializeMoveHandlers(this.detailPanel.container);\n        this.detailPanel.container.appendChild(this.detailPanel.createCloseButton());\n        this.detailPanel.container.style.right = \"0px\";\n        this.detailPanel.container.style.width = \"400px\";\n        this.detailPanel.container.style.height = \"600px\";\n        this.detailPanel.container.padding = \"0px\";\n\n      }\n\n      for (let index = 0; index < notes.length; index++) {\n        if(notes[index].id == id){\n            this._selected = notes[index];\n            break;\n        }   \n      }\n\n      var formDiv = document.createElement('div');\n      formDiv.className = \"form_div\";\n\n\n      var textareaDiv = document.createElement('div');\n      textareaDiv.className = \"textarea_div\";\n\n      var inputText = document.createElement('textarea');\n      inputText.className = \"form-control\";\n      inputText.setAttribute('rows','2')\n      inputText.id = id;\n      inputText.placeholder = \"add texte\";\n\n      inputText.onclick = () => {\n        inputText.focus();\n      }\n\n      textareaDiv.appendChild(inputText);\n\n      var sendButtonDiv = document.createElement('div');\n      sendButtonDiv.className = \"send_button_div\"\n\n      var sendButton = document.createElement('button');\n      sendButton.className = \"btn btn-block\";\n      sendButton.textContent = \"Add\";\n      sendButton.id = id;\n\n      sendButton.onclick = () => {\n          var textAreaValue = document.querySelector(`textarea[id='${sendButton.id}']`).value;\n          document.querySelector(`textarea[id='${sendButton.id}']`).value = \"\";\n\n          if(textAreaValue != \"\" && textAreaValue.trim() != \"\") {\n            var message = new MessageModel();\n            message.id.set(newGUID());\n            message.owner.set(this.user.id);\n            message.username.set(this.user.username);\n            message.date.set(Date.now());\n            message.message.set(textAreaValue);\n\n            this._selected.notes.push(message);\n          }\n\n      }\n\n      sendButtonDiv.appendChild(sendButton);\n      \n      formDiv.appendChild(textareaDiv);\n      formDiv.appendChild(sendButtonDiv);\n      \n      this.detailPanel.setVisible(true);\n      \n      notes.bind( () => {   \n        this.DisplayMessage(formDiv)\n      });\n\n\n    }\n\n    DisplayMessage(formDiv) {\n      var _self = this;\n      var messageContainer = document.createElement('div');\n      messageContainer.className = \"messageContainer\"; \n\n      for (let i = 0; i < this._selected.notes.length; i++) {\n          //message div\n          var message_div = document.createElement('div');\n          message_div.className = \"message_div\";\n\n          //header message\n          var _message = document.createElement('div');\n          _message.className = \"_message\";\n          \n          //name\n          var message_owner = document.createElement('div');\n          message_owner.className = \"message_owner\";\n          message_owner.innerText = this._selected.notes[i].username.get();\n\n\n          //date\n          var message_date = document.createElement('div');\n          message_date.className = \"message_date\";\n          var date = new Date(parseInt(this._selected.notes[i].date));\n          message_date.innerText =   date.getDate() + \"/\" + date.getMonth() + 1 + \"/\" + date.getFullYear();\n\n          \n\n          //message content\n          var message_content = document.createElement('div');\n          message_content.className = \"message_content\";\n\n          var message_texte = document.createElement('div');\n          message_texte.className = \"message_texte\";\n          message_texte.innerHTML = this._selected.notes[i].message;\n\n          if(this._selected.notes[i].owner == this.user.id) {\n            var closeDiv = document.createElement('div');\n            closeDiv.className = \"close_div\";\n\n            var span = document.createElement('span');\n            span.innerHTML = \"X\";\n            span.className = \"close\";\n            span.id = this._selected.notes[i].id\n\n            span.onclick = function(){\n              var dialog = $mdDialog.confirm()\n                .ok(\"Delete !\")\n                .title('Do you want to remove it?')\n                .cancel('Cancel')\n                .clickOutsideToClose(true);\n          \n                $mdDialog.show(dialog)\n                .then((result) => {\n                  _self.deteteMessage(this.id,formDiv);\n                }, function(){});\n              \n            }\n\n            closeDiv.appendChild(span);\n            message_content.appendChild(closeDiv);\n          }\n\n          message_content.appendChild(message_texte);\n\n          _message.appendChild(message_owner);\n          _message.appendChild(message_content);\n          \n\n\n          message_div.appendChild(message_date);\n          message_div.appendChild(_message);\n          \n\n          messageContainer.appendChild(message_div);\n\n      }\n\n\n      this.detailPanelContent.innerHTML = \"\";\n\n      this.detailPanelContent.appendChild(messageContainer);\n      this.detailPanelContent.appendChild(formDiv);\n\n      this.detailPanel.setTitle(this._selected.title.get());\n      this.detailPanel.container.appendChild(this.detailPanelContent);\n\n      var d = document.getElementsByClassName(\"messageContainer\")[0];\n      d.scrollTop = d.scrollHeight;\n  \n    }\n\n    deteteMessage(id, formDiv) {\n      \n      for (let i = 0; i < this._selected.notes.length; i++) {\n        \n        if(this._selected.notes[i].id == id) {\n          this._selected.notes.splice(i,1);\n          // this.DisplayMessage(formDiv);\n          break;\n        }\n        \n      }\n\n\n    }\n\n  /////////////////////////////////////////////// Files ///////////////////////\n\n    DownloadFile(id) {\n      var selected;\n      for(let i = 0; i < this._file_selected.files.length; i++) {\n        selected = this._file_selected.files[i];\n        if(selected._info.id == id) {\n          selected.load( (model,error) => {\n            if(model instanceof Path) {\n              // window.open(\"/sceen/_?u=\" + model._server_id, \"Download\");\n              var element = document.createElement('a');\n              element.setAttribute('href', \"/sceen/_?u=\" + model._server_id);\n              element.setAttribute('download', selected.name);\n\n              element.style.display = 'none';\n              document.body.appendChild(element);\n\n              element.click();\n\n              document.body.removeChild(element);\n            }\n          });\n          break;\n        }\n      }\n    }\n\n    RemoveFile(id) {\n      var dialog = $mdDialog.confirm()\n          .ok(\"Delete !\")\n          .title('Do you want to remove it?')\n          .cancel('Cancel')\n          .clickOutsideToClose(true);\n    \n          $mdDialog.show(dialog)\n          .then((result) => {\n              for (let i = 0; i < this._file_selected.files.length; i++) {\n                if(this._file_selected.files[i]._info.id == id) {\n                  this._file_selected.files.splice(i,1);\n                  break;\n                }\n                  \n              }\n        }, function(){});\n    }\n\n    handle_files(files){\n      var file,filePath,mod_file;\n\n      if(files.length > 0) {\n        for(let i = 0; i < files.length; i++) {\n          filePath = new Path(files[i]);\n\n          this._file_selected.files.force_add_file(files[i].name,filePath,{id : newGUID()})\n\n        }\n      }\n    }\n\n    DisplayFilePanel(id) {\n        var notes = this.model;\n\n        if(this.filePanel == null) {\n          this.filePanel = new PanelClass(this.viewer,id);\n          this.filePanel.initializeMoveHandlers(this.filePanel.container);\n          this.filePanel.container.appendChild(this.filePanel.createCloseButton());\n          this.filePanel.container.style.right = \"0px\";\n          this.filePanel.container.style.width = \"400px\";\n          this.filePanel.container.style.height = \"600px\";\n          this.filePanel.container.padding = \"0px\";\n        // }\n\n        // if(this.filePanelContent == null) {\n          this.filePanelContent = document.createElement('div');\n          this.filePanelContent.className = \"file_panel_content\";\n\n          var dragDrop = document.createElement('div');\n          dragDrop.className = \"dragDrop\";\n          \n          var input = document.createElement('input');\n          input.type = 'file';\n          input.id = \"modal-new-dropzone-input\";\n          input.setAttribute(\"multiple\",\"true\");\n          input.className = \"modal-new-dropzone-input\";\n\n          input.onchange = () => {\n            return this.handle_files(input.files);\n          }\n\n          var file_container = document.createElement('label');\n          file_container.innerHTML = `\n                              <span class=\"modal-new-span-upload\">\n                                click to Choose files to upload or Drop them here\n                              </span>\n                              <ul id=\"modal-new-list-upload\"></ul>`;\n\n          file_container.className = \"text-center\"\n\n          file_container.ondrop = (evt) => {\n            evt.stopPropagation();\n            evt.preventDefault();\n\n            this.handle_files(evt.dataTransfer.files);\n          }\n\n          file_container.ondragover = (evt) => {\n            evt.preventDefault();\n          }\n\n          file_container.htmlFor = \"modal-new-dropzone-input\"\n\n\n          dragDrop.appendChild(input);\n          dragDrop.appendChild(file_container);\n          \n          \n          this.filePanelContent.appendChild(dragDrop);\n\n          var files_div = document.createElement('div');\n          files_div.className = 'files_div';\n\n          this.filePanelContent.appendChild(files_div);\n          this.filePanel.container.appendChild(this.filePanelContent);\n          \n        }\n        \n\n        \n        this.filePanel.setVisible(true);\n        \n\n        for (let index = 0; index < notes.length; index++) {\n          if(notes[index].id == id){\n              this._file_selected = notes[index];\n              break;\n          }   \n        }\n\n        this.filePanel.setTitle(this._file_selected.title.get());\n\n        notes.bind(() => {\n          this.files_display();\n        })\n\n    }\n\n    displayItem(_file,parent) {\n      var items = `<md-list-item>\n                  <p class=\"noteTitle\">${_file.name.get()}</p>\n\n                  <md-button class=\"i_btn\" aria-label=\"add_item\" id=${_file._info.id.get()} ng-click=\"execute_func('delete_file','${_file._info.id.get()}')\">\n                    <i class=\"fa fa-trash\" aria-hidden=\"true\"></i>\n                  </md-button>\n\n                  <md-button class=\"i_btn\" aria-label=\"add_item\" id=${_file._info.id.get()} ng-click=\"execute_func('download','${_file._info.id.get()}')\">\n                    <i class=\"fa fa-download\" aria-hidden=\"true\"></i>\n                  </md-button>\n                </md-list-item>`; \n\n        var content = angular.element(items);\n\n        parent.append(content);\n        $compile(content)($rootScope);\n    }\n\n    files_display() {\n\n      var files = document.getElementsByClassName(\"files_div\")[0];\n      files.innerHTML = \"\";\n\n      var contener = angular.element(files);\n\n      var div = angular.element('<md-list>\\\n        </md-list>');\n\n\n      contener.append(div);\n      $compile(div)($rootScope);\n\n      var _file;\n\n      for (let i = 0; i < this._file_selected.files.length; i++) {\n        _file = this._file_selected.files[i];\n        this.displayItem(_file,div);\n      }\n      \n\n\n      \n\n      \n\n    }\n\n  } // end class\n  Autodesk.Viewing.theExtensionManager.registerExtension('PannelAnnotation', PannelAnnotation);\n  } // end run\n]);",
    "angular.module('app.spinalcom')\n  .factory('authService', [\"$q\", \"ngSpinalCore\", \"config\", \"$http\",\n    function ($q, ngSpinalCore, config, $http) {\n      let factory = {};\n      let user = {\n        username: \"\",\n        password: \"\",\n        id : \"\"\n      };\n      let is_Connected = false;\n      factory.save_user = (username, password, id) => {\n        user.username = username;\n        user.password = password;\n        user.id = id;\n        window.localStorage.setItem(\"spinalhome_cfg\", btoa(JSON.stringify(user)));\n      };\n      factory.get_user = () => {\n        let _user = window.localStorage.getItem(\"spinalhome_cfg\");\n        if (_user) {\n          user = JSON.parse(atob(_user));\n        }\n        return user;\n      };\n\n      factory.logout = (username, password) => {\n        if (user.username != \"\") {\n          factory.save_user(\"\", \"\",\"\");\n          location.reload();\n        }\n      };\n\n      factory.login = (username, password) => {\n        let deferred = $q.defer();\n        let url = \"/get_user_id\";\n        $http.get(url + \"?u=\" + username + \"&p=\" + password)\n          .then(function (data) {\n            var u = parseInt(data.data);\n            var i = 0;\n            if (u == -1) {\n              let msg = (\"Login Error: username / password pair not found.\");\n              // $mdToast.show(loginError_toast)\n              deferred.reject(msg);\n              for (i = 0; i < wait_connectList.length; i++) {\n                wait_connectList[i].reject();\n              }\n              wait_connectList = [];\n              return;\n            }\n            ngSpinalCore.connect(\"http://\" + u + \":\" + password +\n              \"@\" + config.spinalhub_url + \":\" + config.spinalhub_port + \"/\");\n            factory.save_user(username, password,u);\n            is_Connected = true;\n            deferred.resolve();\n            for (i = 0; i < wait_connectList.length; i++) {\n              wait_connectList[i].resolve();\n            }\n            wait_connectList = [];\n          }, function (data) {\n            let msg = ('Connection Error: Imposible to connect to the server.');\n            // $mdToast.show(connectionError_toast)\n            deferred.reject(msg);\n            for (var i = 0; i < wait_connectList.length; i++) {\n              wait_connectList[i].reject();\n            }\n            wait_connectList = [];\n          });\n        return deferred.promise;\n      };\n\n      factory.is_Connected = () => {\n        return is_Connected;\n      };\n      let wait_connectList = [];\n      factory.wait_connect = () => {\n        let deferred = $q.defer();\n        if (is_Connected == true) {\n          deferred.resolve();\n        } else\n          wait_connectList.push(deferred);\n        return deferred.promise;\n      };\n\n      return factory;\n    }\n  ]);",
    "angular.module('app.services')\n  .factory('goldenLayoutService', ['$q', '$window', '$templateCache', '$rootScope', '$compile',\n    function ($q, $window, $templateCache, $rootScope, $compile) {\n      var config = {\n        content: [{\n          type: 'row',\n          content: [{\n            isClosable: false,\n            title: \"Viewer\",\n            type: 'component',\n            componentName: 'SpinalHome',\n            componentState: {\n              template: 'forgeviewer.html',\n              controller: 'forgeViewerCtrl'\n            }\n          }]\n        }]\n      };\n      let myLayout = 0;\n      let factory = {};\n      factory.init = () => {\n        if (myLayout == 0) {\n          myLayout = new GoldenLayout(config, $(\"#g-layout\"));\n          myLayout.registerComponent('SpinalHome', function (container, state) {\n            var element = container.getElement();\n            if (state.template == '') {\n\n              element.html();\n              $compile(element.contents())($rootScope);\n            } else {\n              element.html(\"<div class=\\\"gpannel-content\\\" ng-controller=\\\"\" + state.controller + \"\\\" ng-cloak>\" +\n                $templateCache.get(state.template) + \"</div>\");\n              $compile(element.contents())($rootScope);\n            }\n          });\n\n          myLayout.init();\n          angular.element($window).bind('resize', function () {\n            myLayout.updateSize();\n          });\n          $rootScope.$emit(\"GoldenLayout_READY\");\n        }\n      };\n\n      factory.wait_ready = () => {\n        return $q(function (resolve, reject) {\n          $rootScope.$on(\"GoldenLayout_READY\", () => {\n            resolve();\n          });\n        });\n      };\n\n\n\n      factory.createChild = (config) => {\n        myLayout.root.contentItems[0].addChild(config);\n      };\n\n      factory.createDragSource = (element, config) => {\n        myLayout.createDragSource(element, config);\n\n      };\n\n\n      return factory;\n    }\n  ])\n  .factory('layout_uid', function () {\n    let uid = 0;\n    return ({\n      get: () => {\n        let id = uid++;\n        return id;\n      }\n    });\n  });",
    "angular.module('app.spinalcom')\n  .factory('ngSpinalCore', ['$q', function ($q) {\n    var service = {};\n    service.conn = 0;\n\n    service.connect = function (option) {\n      service.conn = spinalCore.connect(option);\n    };\n    service.store = function (model, path) {\n      var deferred = $q.defer();\n      spinalCore.store(service.conn, model, path, function (model) {\n        deferred.resolve(model);\n      }, function () {\n        deferred.reject();\n      });\n      return deferred.promise;\n    };\n    service.load = function (path) {\n      var deferred = $q.defer();\n      spinalCore.load(service.conn, path, function (model) {\n        deferred.resolve(model);\n      }, function () {\n        deferred.reject();\n      });\n      return deferred.promise;\n    };\n    service.load_type = function (model, path) {\n      var deferred = $q.defer();\n      spinalCore.load_type(service.conn, model, path, function (model) {\n        deferred.resolve(model);\n      }, function () {\n        deferred.reject();\n      });\n      return deferred.promise;\n    };\n    service.load_right = function (ptr) {\n      var deferred = $q.defer();\n      spinalCore.load_right(service.conn, ptr, function (model) {\n        deferred.resolve(model);\n      }, function () {\n        deferred.reject();\n      });\n      return deferred.promise;\n    };\n    service.share_model = function (data, filename, flag, target_username) {\n      return spinalCore.share_model(service.conn, data, filename, flag, target_username);\n    };\n    return service;\n  }]);",
    "angular.module('app.spinalcom')\n  .factory('spinalModelDictionary', [\"$q\", \"ngSpinalCore\", \"config\", \"authService\", \"$routeParams\", \"$location\",\n    function ($q, ngSpinalCore, config, authService, $routeParams, $location) {\n      let factory = {};\n      factory.model = 0;\n      factory.init = () => {\n        var deferred = $q.defer();\n        if (factory.model == 0) {\n          authService.wait_connect().then(() => {\n            let user = authService.get_user();\n            let path = $routeParams.filepath;\n            console.log(path)\n            if (path) {\n              path = atob(path);\n              ngSpinalCore.load(path).then((m) => {\n                factory.model = m;\n                console.log(m);\n                deferred.resolve(m);\n\n              }, () => {\n                let msg = \"not able to load : \" + path;\n                console.error(msg);\n                $location.replace('/drive/');\n                deferred.reject(msg);\n              });\n            }\n          }, () => {\n            let msg = \"not able to load : \" + path;\n            console.error(msg);\n            $location.replace('/drive/');\n            deferred.reject(msg);\n          });\n        } else\n          deferred.resolve(factory.model);\n        return deferred.promise;\n      };\n      return factory;\n    }\n  ]);"
  ]
}