{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "app/app.config.js",
    "app/app.js",
    "app/app.route.js",
    "app/controllers/forgeViewerCtrl.js",
    "app/controllers/loginCtrl.js",
    "app/controllers/mainCtrl.js",
    "app/controllers/navbarCtrl.js",
    "app/directives/navbar.js",
    "app/services/authService.js",
    "app/services/goldenLayoutService.js",
    "app/services/spinalCore.js",
    "app/services/spinalModelDictionary.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "angular.module(\"settings\", []).constant(\"config\", {\n  main_path: \"/\",\n  spinalhub_url: \"127.0.0.1\",\n  spinalhub_port: \"8888\",\n  spinalhub_user: \"168\"\n});\n",
    "angular.module(\"app.route\", [\"ngRoute\"]);\nangular.module(\"app.services\", []);\nangular.module(\"app.directives\", []);\nangular.module(\"app.controllers\", []);\nangular.module(\"app.spinalcom\", [\"settings\", \"ngMaterial\"]);\nangular.module(\"app.spinalforge.plugin\", []);\n\nangular\n  .module(\"SpinalApp\", [\n    \"ngAnimate\",\n    \"ngMaterial\",\n    \"app.directives\",\n    \"app.route\",\n    \"app.services\",\n    \"app.controllers\",\n    \"ngMdIcons\",\n    \"settings\",\n    \"app.spinalcom\",\n    \"app.spinalforge.plugin\",\n    \"colorpicker.module\"\n  ])\n  .run([\n    \"$rootScope\",\n    \"$location\",\n    \"authService\",\n    function($rootScope, $location, authService) {\n      let user = authService.get_user();\n      $rootScope.$on(\"$routeChangeStart\", function(event, next, current) {\n        if (next.$$route.authenticate) {\n          if (!authService.is_Connected()) {\n            authService.login(user.username, user.password).then(\n              function() {},\n              function() {\n                $location.path(\"/login\");\n              }\n            );\n          }\n        }\n      });\n    }\n  ])\n\n  .config([\n    \"$mdThemingProvider\",\n    function($mdThemingProvider) {\n      $mdThemingProvider\n        .theme(\"altTheme\")\n        .primaryPalette(\"grey\", {\n          default: \"200\"\n        })\n        .accentPalette(\"grey\", {\n          default: \"700\"\n        })\n        .dark();\n      $mdThemingProvider.theme(\"default\").dark();\n\n      $mdThemingProvider.setDefaultTheme(\"altTheme\");\n      $mdThemingProvider.alwaysWatchTheme(true);\n    }\n  ])\n  .run([\n    \"$templateCache\",\n    \"$http\",\n    function($templateCache, $http) {\n      let load_template = (uri, name) => {\n        $http.get(uri).then(\n          response => {\n            $templateCache.put(name, response.data);\n          },\n          () => {\n            console.log(\"Cannot load the file \" + uri);\n          }\n        );\n      };\n      let toload = [\n        {\n          uri: \"app/templates/forgeviewer.html\",\n          name: \"forgeviewer.html\"\n        }\n      ];\n      for (var i = 0; i < toload.length; i++) {\n        load_template(toload[i].uri, toload[i].name);\n      }\n\n      // $templateCache.put('templateId.html', 'This is the content of the template');\n    }\n  ]);\n",
    "angular.module(\"app.route\").config([\n  \"$routeProvider\",\n  function($routeProvider) {\n    $routeProvider\n\n      .when(\"/viewer/:filepath\", {\n        templateUrl: \"app/templates/main.html\",\n        authenticate: true,\n        controller: \"mainCtrl\"\n      })\n      .when(\"/login\", {\n        templateUrl: \"app/templates/login.html\",\n        authenticate: false,\n        controller: \"loginCtrl\"\n      })\n      .when(\"/404\", {\n        authenticate: false,\n        controller: [\n          \"$location\",\n          function($location) {\n            $location.replace(\"/drive/\");\n          }\n        ]\n      })\n      .otherwise({\n        redirectTo: \"/404\"\n      });\n\n    // .otherwise({\n    //   redirectTo: '/viewer'\n    // });\n  }\n]);\n",
    "angular.module(\"app.spinalforge.plugin\").controller(\"forgeViewerCtrl\", [\n  \"$scope\",\n  \"$rootScope\",\n  \"$mdDialog\",\n  \"authService\",\n  \"$compile\",\n  \"$injector\",\n  \"layout_uid\",\n  \"spinalModelDictionary\",\n  \"spinalRegisterViewerPlugin\",\n  function(\n    $scope,\n    $rootScope,\n    $mdDialog,\n    authService,\n    $compile,\n    $injector,\n    layout_uid,\n    spinalModelDictionary,\n    spinalRegisterViewerPlugin\n  ) {\n    $scope.injector = $injector;\n    $scope.uid = layout_uid.get();\n    $rootScope.allNotes = [];\n    // load etc..\n    spinalModelDictionary.init().then(function(ForgeFile) {\n      var viewerApp, viewables, indexViewable, oViewer;\n\n      var config = {\n        inViewerSearchConfig: {\n          uiEnabled: true,\n          clientId: \"dsadsa\",\n          sessionId: \"F969EB70-242F-11E6-BDF4-0800200C9A66\",\n          loadedModelTab: {\n            enabled: true, // If false, the tab is hidden.\n            displayName: \"This View\",\n            pageSize: 50\n          },\n          relatedItemsTab: {\n            enabled: true, // If false, the tab is hidden.\n            displayName: \"This Item\",\n            pageSize: 20\n          }\n        }\n      };\n      spinalRegisterViewerPlugin.register(\n        \"Autodesk.ADN.Viewing.Extension.Color\"\n      );\n      // var extensions = ['PanelAnnotation', \"Autodesk.ADN.Viewing.Extension.Color\"];\n\n      var options = {\n        env: \"Local\",\n        docid: \"\",\n        useADP: false\n      };\n      var docs = [];\n\n      var documentId = \"urn:\" + ForgeFile.urn.get();\n\n      docs = ForgeFile._children.get();\n      if (docs.length != 0) {\n        var path = docs[0].path;\n        for (var i = 0; i < docs.length; i++) {\n          if (/.+\\.svf$/.test(docs[i].path)) {\n            path = docs[i].path;\n            break;\n          }\n        }\n        path = window.location.origin + path;\n        options.docid = path;\n      }\n      init_autodesk(documentId);\n\n      // get_oAuthToken(ForgeFile, documentId, init_autodesk);\n\n      // function get_oAuthToken(forgeFile, documentId, callback) {\n      //   forgeFile.oauth.set(\"\");\n      //   forgeFile.ask_token.set(true);\n      //   var ask_for_token = true;\n      //   var oauth_onchange = function () {\n      //     if (ask_for_token && forgeFile.oauth.get() != \"\") {\n      //       ask_for_token = false;\n      //       forgeFile.oauth.unbind(oauth_onchange);\n      //       options.accessToken = forgeFile.oauth.get();\n      //       callback(documentId);\n      //     }\n      //   };\n      //   forgeFile.oauth.bind(oauth_onchange);\n      // }\n\n      // function init_autodesk(documentId) {\n      //   Autodesk.Viewing.Initializer(options, function onInitialized() {\n      //     viewerApp = new Autodesk.Viewing.ViewingApplication('MyViewerDiv' + $scope.uid);\n      //     viewerApp.registerViewer(viewerApp.k3D, Autodesk.Viewing.Private.GuiViewer3D, config3d);\n      //     viewerApp.loadDocument(documentId, onDocumentLoadSuccess, onDocumentLoadFailure);\n      //   });\n      // }\n      function init_autodesk(documentId) {\n        oViewer = new Autodesk.Viewing.Private.GuiViewer3D(\n          $(\"#MyViewerDiv\" + $scope.uid)[0],\n          config\n        ); // With toolbar\n\n        Autodesk.Viewing.Initializer(options, function onInitialized() {\n          oViewer.initialize();\n          console.log(options.docid);\n          oViewer.loadModel(\n            options.docid,\n            config,\n            onItemLoadSuccess,\n            onDocumentLoadFailure\n          );\n          $scope.oviewer = oViewer;\n          // for (var i = 0; i < docs.length; i++) {\n          //   var r = $('<div><button id=\"view_' + i + '\">' + docs[i].name + '<div><img id=\"img__' + i + '\" src=\"' + docs[i].path + '.png\"></div></button></div>');\n          //   $('#list').append(r);\n          //   $('#view_' + i).click(function (e) {\n          //     e.stopPropagation();\n          //     // oViewer.impl.unloadCurrentModel () ; API would be tearDown()/setUp() tearDown() unloads extensions too, so you need\n          //     // setUp() after that to load again setUp() requires the viewer configuration again, the one you use to start the\n          //     // viewer.\n          //     oViewer.tearDown();\n          //     oViewer.setUp({\n          //       env: 'Local'\n          //     });\n          //     var i = parseInt(e.target.id.substring(5));\n          //     oViewer.loadModel(docs[i].path, config, onItemLoadSuccess, onDocumentLoadFailure);\n          //     // oViewer.loadModel(docs[i].path);\n          //   });\n          // }\n\n          // viewerApp = new Autodesk.Viewing.ViewingApplication('MyViewerDiv');\n          // oViewer.registerViewer(oViewer.k3D, Autodesk.Viewing.Private.GuiViewer3D, config);\n          // viewerApp.loadDocument(documentId, onDocumentLoadSuccess, onDocumentLoadFailure);\n        });\n      }\n\n      // function onDocumentLoadSuccess(doc) {\n      //   viewables = viewerApp.bubble.search({\n      //     'type': 'geometry',\n      //     'role': '3d'\n      //   });\n      //   if (viewables.length === 0) {\n      //     console.error('Document contains no viewables.');\n      //     return;\n      //   }\n      //   viewerApp.selectItem(viewables[viewables.length - 1].data, onItemLoadSuccess, onItemLoadFail);\n      // }\n\n      function onDocumentLoadFailure(viewerErrorCode) {\n        console.error(\"onDocumentLoadFailure() - errorCode:\" + viewerErrorCode);\n      }\n\n      function onItemLoadSuccess(viewer, item) {\n        viewer.scope = $scope;\n        // console.log('Viewers are equal: ' + (viewer === viewerApp.getCurrentViewer()));\n        oViewer.addEventListener(\n          Autodesk.Viewing.GEOMETRY_LOADED_EVENT,\n          function onGeometryLoadEvent() {\n            oViewer.removeEventListener(\n              Autodesk.Viewing.GEOMETRY_LOADED_EVENT,\n              onGeometryLoadEvent\n            );\n            let extensions = spinalRegisterViewerPlugin.get();\n            for (var i = 0; i < extensions.length; i++) {\n              oViewer.loadExtension(extensions[i], options);\n            }\n            // var spinalExtension = oViewer.getExtension(\"SpinalCom.Forge.Extension\");\n            // if (typeof spinalExtension != 'undefined')\n            //   spinalExtension.mainPanel.setBuilding(Building);\n          }\n        );\n      }\n\n      // function onItemLoadFail(errorCode) {\n      //   console.error('onItemLoadFail() - errorCode:' + errorCode);\n      // }\n    });\n  }\n]);\n",
    "angular.module(\"app.controllers\").controller(\"loginCtrl\", [\n  \"$scope\",\n  \"authService\",\n  \"$mdToast\",\n  \"$location\",\n  function($scope, authService, $mdToast, $location) {\n    let toast = $mdToast.simple().hideDelay(3000);\n    authService.logout();\n    $scope.conf = {\n      email: \"\",\n      password: \"\"\n    };\n    $scope.ConnectBtn = () => {\n      authService.login($scope.conf.email, $scope.conf.password).then(\n        () => {\n          $location.path(\"/home\");\n        },\n        err => {\n          toast.textContent(err);\n          $mdToast.show(toast);\n        }\n      );\n    };\n  }\n]);\n",
    "angular.module(\"app.controllers\").controller(\"mainCtrl\", [\n  \"$scope\",\n  \"$routeParams\",\n  \"goldenLayoutService\",\n  function($scope, $routeParams, goldenLayoutService) {\n    goldenLayoutService.init();\n  }\n]);\n",
    "angular\n  .module(\"app.controllers\")\n  .controller(\"navbarCtrl\", [\n    \"$scope\",\n    \"authService\",\n    \"$location\",\n    \"$routeParams\",\n    \"$mdSidenav\",\n    function($scope, authService, $location, $routeParams, $mdSidenav) {\n      $scope.username = \"\";\n      $scope.connected = false;\n      authService.wait_connect().then(() => {\n        $scope.username = authService.get_user().username;\n        $scope.connected = true;\n        setTimeout(() => {\n          $scope.viewer = $routeParams.filepath;\n          if ($scope.viewer) {\n            $scope.viewer = atob($scope.viewer);\n            $scope.fullPath = $scope.viewer;\n            let __path = $scope.fullPath.split(\"/\");\n\n            $scope.path = __path[__path.length - 1];\n          } else {\n            $scope.viewer = \"viewer\";\n          }\n          console.log(\"$scope.viewer\", $scope.viewer);\n        }, 500);\n      });\n      $scope.logout = () => {\n        $location.path(\"/login\");\n      };\n      $scope.clickUser = () => {\n        $mdSidenav(\"right\").open();\n      };\n\n      // get in SpinalDrive_Env\n      $scope.layouts = [\n        {\n          id: \"drag-viewer\",\n          name: \"viewer\",\n          cfg: {\n            isClosable: true,\n            title: \"viewer\",\n            type: \"component\",\n            componentName: \"SpinalHome\",\n            componentState: {\n              template: \"forgeviewer.html\",\n              controller: \"forgeViewerCtrl\"\n            }\n          }\n        }\n      ];\n    }\n  ])\n  .controller(\"RightMenuCtrl\", [\n    \"$scope\",\n    \"$timeout\",\n    \"$mdSidenav\",\n    \"$location\",\n    \"authService\",\n    \"$mdDialog\",\n    \"$templateCache\",\n    function(\n      $scope,\n      $timeout,\n      $mdSidenav,\n      $location,\n      authService,\n      $mdDialog,\n      $templateCache\n    ) {\n      authService.wait_connect().then(() => {\n        $scope.username = authService.get_user().username;\n      });\n\n      $scope.close = function() {\n        $mdSidenav(\"right\").close();\n      };\n\n      $scope.logOut = () => {\n        $mdSidenav(\"right\")\n          .close()\n          .then(function() {\n            $mdDialog\n              .show(\n                $mdDialog\n                  .confirm()\n                  .ariaLabel(\"confirm menu\")\n                  .ok(\"Confim\")\n                  .cancel(\"Cancel\")\n                  .title(\"Do you want to log out ?\")\n                  .targetEvent(event)\n              )\n              .then(\n                function() {\n                  window.location = \"/html/drive#!/login\";\n                },\n                function() {}\n              );\n          });\n      };\n      $scope.returnToDrive = () => {\n        $mdSidenav(\"right\")\n          .close()\n          .then(function() {\n            $mdDialog\n              .show(\n                $mdDialog\n                  .confirm()\n                  .ariaLabel(\"confirm menu\")\n                  .ok(\"Confim\")\n                  .cancel(\"Cancel\")\n                  .title(\"Do you want to return to SpinalBIM Drive ?\")\n                  .targetEvent(event)\n              )\n              .then(\n                function() {\n                  window.location = \"/html/drive/\";\n                },\n                function() {}\n              );\n          });\n      };\n\n      $scope.modifyPassword = function(event) {\n        $mdSidenav(\"right\")\n          .close()\n          .then(function() {\n            let my_prompt = $mdDialog\n              .confirm()\n              .ariaLabel(\"confirm menu\")\n              .ok(\"Confim\")\n              .cancel(\"Cancel\")\n              .title(\"Do you want to modify your password ?\")\n              .targetEvent(event);\n            $mdDialog.show(my_prompt).then(\n              function(result) {\n                $mdDialog.show({\n                  ariaLabel: \"changePasswordModal\",\n                  template: $templateCache.get(\"changePasswordModal.html\"),\n                  parent: angular.element(document.body),\n                  clickOutsideToClose: true,\n                  fullscreen: true,\n                  controller: [\n                    \"$scope\",\n                    \"authService\",\n                    \"$mdToast\",\n                    \"$q\",\n                    \"$mdDialog\",\n                    changePasswordModelCtrl\n                  ]\n                });\n              },\n              function() {}\n            );\n          });\n      };\n      $scope.menuList = [\n        {\n          name: \"Change Password\",\n          action: $scope.modifyPassword\n        },\n        {\n          name: \"Return to SpinalBIM Drive\",\n          action: $scope.returnToDrive\n        },\n        {\n          name: \"Log out\",\n          action: $scope.logOut\n        }\n      ];\n    }\n  ]);\nvar changePasswordModelCtrl = function(\n  $scope,\n  authService,\n  $mdToast,\n  $q,\n  $mdDialog\n) {\n  $scope.passwordInputType = \"password\";\n  $scope.showPassword = function() {\n    $scope.passwordInputType = \"text\";\n  };\n  $scope.hidePassword = function() {\n    $scope.passwordInputType = \"password\";\n  };\n\n  $scope.cancel = function() {\n    $mdDialog.cancel();\n  };\n  $scope.change_password = {\n    currentPassword: \"\",\n    password: \"\",\n    confirm_password: \"\"\n  };\n  $scope.onError = function(err) {\n    $mdToast.showSimple(\"Error : \" + err);\n  };\n  let options = location.host + \"/\";\n\n  $scope.change_password = (user_id, password, new_password) => {\n    let deferred = $q.defer();\n    SpinalUserManager.change_password(\n      options,\n      user_id,\n      password,\n      new_password,\n      function() {\n        deferred.resolve();\n      },\n      function(err) {\n        deferred.reject(err);\n      }\n    );\n    return deferred.promise;\n  };\n\n  $scope.get_user_id = (user_name, password) => {\n    let deferred = $q.defer();\n    SpinalUserManager.get_user_id(\n      options,\n      user_name,\n      password,\n      function(response) {\n        let id = parseInt(response);\n        deferred.resolve(id);\n      },\n      function(err) {\n        deferred.reject(err);\n      }\n    );\n    return deferred.promise;\n  };\n\n  $scope.changePasswordSubmit = (newpasswordForm, change_password) => {\n    if (newpasswordForm.$valid) {\n      let user = authService.get_user();\n      $scope\n        .get_user_id(user.username, change_password.currentPassword)\n        .then(function(user_id) {\n          $scope\n            .change_password(\n              user.username,\n              change_password.currentPassword,\n              change_password.password\n            )\n            .then(function() {\n              authService.save_user(user.username, change_password.password);\n              $mdToast.showSimple(\"Password has been successfully modified.\");\n              $mdDialog.hide();\n            }, $scope.onError);\n        }, $scope.onError);\n      return;\n    }\n  };\n};\n",
    "angular\n  .module(\"app.directives\")\n  .directive(\"navbar\", [\n    function() {\n      return {\n        restrict: \"E\",\n        templateUrl: \"app/templates/navbar.html\",\n        controller: \"navbarCtrl\"\n      };\n    }\n  ])\n  .directive(\"menuGlayout\", [\n    \"goldenLayoutService\",\n    function(goldenLayoutService) {\n      return {\n        restrict: \"E\",\n        scope: {\n          layoutInfo: \"=info\"\n        },\n        replace: true,\n        template:\n          '<li ng-repeat=\"layout in layoutInfo\"  id=\"{{layout.id}}\"><a >{{layout.name}}</a></li>',\n        link: scope => {\n          goldenLayoutService.wait_ready().then(() => {\n            let create_callback = (goldenLayoutService, layout) => {\n              return () => {\n                goldenLayoutService.createChild(layout.cfg);\n              };\n            };\n            for (var i = 0; i < scope.layoutInfo.length; i++) {\n              let layout = scope.layoutInfo[i];\n              goldenLayoutService.createDragSource(\n                $(\"#\" + layout.id)[0],\n                layout.cfg\n              );\n              $(\"#\" + layout.id).click(\n                create_callback(goldenLayoutService, layout)\n              );\n            }\n          });\n        }\n      };\n    }\n  ])\n  .directive(\"ngRightClick\", [\n    \"$parse\",\n    function($parse) {\n      return function(scope, element, attrs) {\n        var fn = $parse(attrs.ngRightClick);\n        element.bind(\"contextmenu\", function(event) {\n          scope.$apply(function() {\n            event.preventDefault();\n            fn(scope, {\n              $event: event\n            });\n          });\n        });\n      };\n    }\n  ]);\n",
    "angular.module(\"app.spinalcom\").factory(\"authService\", [\n  \"$q\",\n  \"ngSpinalCore\",\n  \"config\",\n  \"$http\",\n  function($q, ngSpinalCore, config, $http) {\n    let factory = {};\n    let user = {\n      username: \"\",\n      password: \"\",\n      id: \"\"\n    };\n    let is_Connected = false;\n    factory.save_user = (username, password, id) => {\n      user.username = username;\n      user.password = password;\n      user.id = id;\n      window.localStorage.setItem(\"spinalhome_cfg\", btoa(JSON.stringify(user)));\n    };\n    factory.get_user = () => {\n      let _user = window.localStorage.getItem(\"spinalhome_cfg\");\n      if (_user) {\n        user = JSON.parse(atob(_user));\n      }\n      return user;\n    };\n\n    factory.logout = (username, password) => {\n      if (user.username != \"\") {\n        factory.save_user(\"\", \"\", \"\");\n        location.reload();\n      }\n    };\n\n    factory.login = (username, password) => {\n      let deferred = $q.defer();\n      let url = \"/get_user_id\";\n      $http.get(url + \"?u=\" + username + \"&p=\" + password).then(\n        function(data) {\n          var u = parseInt(data.data);\n          var i = 0;\n          if (u == -1) {\n            let msg = \"Login Error: username / password pair not found.\";\n            // $mdToast.show(loginError_toast)\n            deferred.reject(msg);\n            for (i = 0; i < wait_connectList.length; i++) {\n              wait_connectList[i].reject();\n            }\n            wait_connectList = [];\n            return;\n          }\n          ngSpinalCore.connect(\n            \"http://\" +\n              u +\n              \":\" +\n              password +\n              \"@\" +\n              config.spinalhub_url +\n              \":\" +\n              config.spinalhub_port +\n              \"/\"\n          );\n          factory.save_user(username, password, u);\n          is_Connected = true;\n          deferred.resolve();\n          for (i = 0; i < wait_connectList.length; i++) {\n            wait_connectList[i].resolve();\n          }\n          wait_connectList = [];\n        },\n        function() {\n          let msg = \"Connection Error: Imposible to connect to the server.\";\n          // $mdToast.show(connectionError_toast)\n          deferred.reject(msg);\n          for (var i = 0; i < wait_connectList.length; i++) {\n            wait_connectList[i].reject();\n          }\n          wait_connectList = [];\n        }\n      );\n      return deferred.promise;\n    };\n\n    factory.is_Connected = () => {\n      return is_Connected;\n    };\n    let wait_connectList = [];\n    factory.wait_connect = () => {\n      let deferred = $q.defer();\n      if (is_Connected == true) {\n        deferred.resolve();\n      } else wait_connectList.push(deferred);\n      return deferred.promise;\n    };\n\n    return factory;\n  }\n]);\n",
    "angular\n  .module(\"app.services\")\n  .factory(\"goldenLayoutService\", [\n    \"$q\",\n    \"$window\",\n    \"$templateCache\",\n    \"$rootScope\",\n    \"$compile\",\n    function($q, $window, $templateCache, $rootScope, $compile) {\n      var config = {\n        content: [\n          {\n            type: \"row\",\n            content: [\n              {\n                isClosable: false,\n                title: \"Viewer\",\n                type: \"component\",\n                componentName: \"SpinalHome\",\n                componentState: {\n                  template: \"forgeviewer.html\",\n                  controller: \"forgeViewerCtrl\"\n                }\n              }\n            ]\n          }\n        ]\n      };\n      let myLayout = 0;\n      let factory = {};\n      factory.init = () => {\n        if (myLayout == 0) {\n          myLayout = new GoldenLayout(config, $(\"#g-layout\"));\n          myLayout.registerComponent(\"SpinalHome\", function(container, state) {\n            var element = container.getElement();\n            if (state.template == \"\") {\n              element.html();\n              $compile(element.contents())($rootScope);\n            } else {\n              element.html(\n                '<div class=\"gpanel-content\" ng-controller=\"' +\n                  state.controller +\n                  '\" ng-cloak>' +\n                  $templateCache.get(state.template) +\n                  \"</div>\"\n              );\n              $compile(element.contents())($rootScope);\n            }\n          });\n\n          myLayout.init();\n          angular.element($window).bind(\"resize\", function() {\n            myLayout.updateSize();\n          });\n          $rootScope.$emit(\"GoldenLayout_READY\");\n        }\n      };\n\n      factory.wait_ready = () => {\n        return $q(function(resolve, reject) {\n          $rootScope.$on(\"GoldenLayout_READY\", () => {\n            resolve();\n          });\n        });\n      };\n\n      factory.createChild = config => {\n        myLayout.root.contentItems[0].addChild(config);\n      };\n\n      factory.createDragSource = (element, config) => {\n        myLayout.createDragSource(element, config);\n      };\n\n      return factory;\n    }\n  ])\n  .factory(\"layout_uid\", function() {\n    let uid = 0;\n    return {\n      get: () => {\n        let id = uid++;\n        return id;\n      }\n    };\n  })\n  .factory(\"spinalRegisterViewerPlugin\", function() {\n    let plugin = [];\n    return {\n      get: () => {\n        return plugin;\n      },\n      register: name => {\n        for (var i = 0; i < plugin.length; i++) {\n          if (plugin[i] === name) {\n            return;\n          }\n        }\n        plugin.push(name);\n      }\n    };\n  });\n",
    "angular.module(\"app.spinalcom\").factory(\"ngSpinalCore\", [\n  \"$q\",\n  function($q) {\n    var service = {};\n    service.conn = 0;\n\n    service.connect = function(option) {\n      service.conn = spinalCore.connect(option);\n    };\n    service.store = function(model, path) {\n      var deferred = $q.defer();\n      spinalCore.store(\n        service.conn,\n        model,\n        path,\n        function(model) {\n          deferred.resolve(model);\n        },\n        function() {\n          deferred.reject();\n        }\n      );\n      return deferred.promise;\n    };\n    service.load = function(path) {\n      var deferred = $q.defer();\n      spinalCore.load(\n        service.conn,\n        path,\n        function(model) {\n          deferred.resolve(model);\n        },\n        function() {\n          deferred.reject();\n        }\n      );\n      return deferred.promise;\n    };\n    service.load_type = function(model, path) {\n      var deferred = $q.defer();\n      spinalCore.load_type(\n        service.conn,\n        model,\n        path,\n        function(model) {\n          deferred.resolve(model);\n        },\n        function() {\n          deferred.reject();\n        }\n      );\n      return deferred.promise;\n    };\n    service.load_right = function(ptr) {\n      var deferred = $q.defer();\n      spinalCore.load_right(\n        service.conn,\n        ptr,\n        function(model) {\n          deferred.resolve(model);\n        },\n        function() {\n          deferred.reject();\n        }\n      );\n      return deferred.promise;\n    };\n    service.share_model = function(data, filename, flag, target_username) {\n      return spinalCore.share_model(\n        service.conn,\n        data,\n        filename,\n        flag,\n        target_username\n      );\n    };\n    return service;\n  }\n]);\n",
    "angular.module(\"app.spinalcom\").factory(\"spinalModelDictionary\", [\n  \"$q\",\n  \"ngSpinalCore\",\n  \"config\",\n  \"authService\",\n  \"$routeParams\",\n  \"$location\",\n  function($q, ngSpinalCore, config, authService, $routeParams, $location) {\n    let factory = {};\n    factory.model = 0;\n    factory.init = () => {\n      var deferred = $q.defer();\n      if (factory.model == 0) {\n        authService.wait_connect().then(\n          () => {\n            let path = $routeParams.filepath;\n            console.log(path);\n            if (path) {\n              path = atob(path);\n              ngSpinalCore.load(path).then(\n                m => {\n                  factory.model = m;\n                  console.log(m);\n                  deferred.resolve(m);\n                },\n                () => {\n                  let msg = \"not able to load : \" + path;\n                  console.error(msg);\n                  $location.replace(\"/drive/\");\n                  deferred.reject(msg);\n                }\n              );\n            } else {\n              $location.replace(\"/drive/\");\n            }\n          },\n          () => {\n            let msg = \"not able to load : \" + path;\n            console.error(msg);\n            $location.replace(\"/drive/\");\n            deferred.reject(msg);\n          }\n        );\n      } else deferred.resolve(factory.model);\n      return deferred.promise;\n    };\n    return factory;\n  }\n]);\n"
  ]
}