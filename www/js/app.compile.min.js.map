{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "app/app.config.js",
    "app/app.js",
    "app/app.route.js",
    "app/controllers/forgeViewerCtrl.js",
    "app/controllers/loginCtrl.js",
    "app/controllers/mainCtrl.js",
    "app/controllers/navbarCtrl.js",
    "app/directives/navbar.js",
    "app/run/plugin-annotation.js",
    "app/services/authService.js",
    "app/services/goldenLayoutService.js",
    "app/services/spinalCore.js",
    "app/services/spinalModelDictionary.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()",
    "angular.module('settings', [])\n  .constant('config', {\n    main_path: '/',\n    spinalhub_url: '127.0.0.1',\n    spinalhub_port: '8888',\n    spinalhub_user: '168',\n  });",
    "angular.module('app.route', ['ngRoute']);\nangular.module('app.services', []);\nangular.module('app.directives', []);\nangular.module('app.controllers', []);\nangular.module('app.spinalcom', ['settings', 'ngMaterial']);\nangular.module('app.spinalforge.plugin', []);\n\nangular.module('SpinalApp', ['ngAnimate', 'ngMaterial', 'app.directives', 'app.route',\n    'app.services', 'app.controllers', 'ngMdIcons', 'settings', 'app.spinalcom', 'app.spinalforge.plugin', \"colorpicker.module\"\n  ])\n  .run(['$rootScope', '$location', 'authService', function ($rootScope, $location, authService) {\n    let user = authService.get_user();\n    $rootScope.$on('$routeChangeStart', function (event, next, current) {\n      if (next.$$route.authenticate) {\n        if (!authService.is_Connected()) {\n          authService.login(user.username, user.password)\n            .then(function () {},\n              function () {\n                $location.path('/login');\n              });\n        }\n      }\n    });\n  }])\n\n\n  .config([\"$mdThemingProvider\", function ($mdThemingProvider) {\n    $mdThemingProvider.theme('altTheme')\n      .primaryPalette('grey', {\n        'default': '200'\n      })\n      .accentPalette('grey', {\n        'default': '700'\n      })\n      .dark();\n    $mdThemingProvider.theme('default')\n      .dark();\n\n    $mdThemingProvider.setDefaultTheme('altTheme');\n    $mdThemingProvider.alwaysWatchTheme(true);\n  }]).run([\"$templateCache\", \"$http\", function ($templateCache, $http) {\n    let load_template = (uri, name) => {\n      $http.get(uri).then((response) => {\n        $templateCache.put(name, response.data);\n      }, (errorResponse) => {\n        console.log('Cannot load the file ' + uri);\n      });\n    };\n    let toload = [{\n      uri: 'app/templates/forgeviewer.html',\n      name: 'forgeviewer.html'\n    }];\n    for (var i = 0; i < toload.length; i++) {\n      load_template(toload[i].uri, toload[i].name);\n    }\n\n    // $templateCache.put('templateId.html', 'This is the content of the template');\n  }]);",
    "angular.module('app.route')\n  .config([\"$routeProvider\", \"$locationProvider\",\n    function ($routeProvider, $locationProvider) {\n      $routeProvider\n\n        .when(\"/viewer/:filepath\", {\n          templateUrl: \"app/templates/main.html\",\n          authenticate: true,\n          controller: 'mainCtrl'\n        })\n        .when(\"/login\", {\n          templateUrl: \"app/templates/login.html\",\n          authenticate: false,\n          controller: 'loginCtrl'\n        })\n        .when('/404', {\n          authenticate: false,\n          controller: ['$location', function ($location) {\n            $location.replace('/drive/');\n          }]\n        }).otherwise({\n          redirectTo: '/404'\n        });\n\n      // .otherwise({\n      //   redirectTo: '/viewer'\n      // });\n    }\n  ]);",
    "angular.module('app.spinalforge.plugin')\n  .controller('forgeViewerCtrl', [\"$scope\", \"$rootScope\", \"$mdDialog\", \"authService\", \"$compile\", \"$injector\", \"layout_uid\", \"spinalModelDictionary\", \"spinalRegisterViewerPlugin\",\n    function ($scope, $rootScope, $mdDialog, authService, $compile, $injector, layout_uid, spinalModelDictionary, spinalRegisterViewerPlugin) {\n      $scope.injector = $injector;\n      $scope.uid = layout_uid.get();\n      $rootScope.allNotes = [];\n      // load etc..\n      spinalModelDictionary.init().then(function (ForgeFile) {\n        var viewerApp, viewables, indexViewable, oViewer;\n\n        var config = {\n          inViewerSearchConfig: {\n            uiEnabled: true,\n            clientId: \"dsadsa\",\n            sessionId: \"F969EB70-242F-11E6-BDF4-0800200C9A66\",\n            loadedModelTab: {\n              enabled: true, // If false, the tab is hidden.\n              displayName: 'This View',\n              pageSize: 50\n            },\n            relatedItemsTab: {\n              enabled: true, // If false, the tab is hidden.\n              displayName: 'This Item',\n              pageSize: 20\n            }\n          },\n        };\n        spinalRegisterViewerPlugin.register(\"Autodesk.ADN.Viewing.Extension.Color\");\n        // var extensions = ['PannelAnnotation', \"Autodesk.ADN.Viewing.Extension.Color\"];\n\n        var options = {\n          env: 'Local',\n          'docid': \"\"\n        };\n        var docs = [];\n\n\n        var documentId = 'urn:' + ForgeFile.urn.get();\n\n\n        docs = ForgeFile._children.get();\n        if (docs.length != 0) {\n          var path = docs[0].path;\n          for (var i = 0; i < docs.length; i++) {\n            if (/.+\\.svf$/.test(docs[i].path)) {\n              path = docs[i].path;\n              break;\n            }\n          }\n          options.docid = path;\n        }\n        init_autodesk(documentId);\n\n        // get_oAuthToken(ForgeFile, documentId, init_autodesk);\n\n        // function get_oAuthToken(forgeFile, documentId, callback) {\n        //   forgeFile.oauth.set(\"\");\n        //   forgeFile.ask_token.set(true);\n        //   var ask_for_token = true;\n        //   var oauth_onchange = function () {\n        //     if (ask_for_token && forgeFile.oauth.get() != \"\") {\n        //       ask_for_token = false;\n        //       forgeFile.oauth.unbind(oauth_onchange);\n        //       options.accessToken = forgeFile.oauth.get();\n        //       callback(documentId);\n        //     }\n        //   };\n        //   forgeFile.oauth.bind(oauth_onchange);\n        // }\n\n        // function init_autodesk(documentId) {\n        //   Autodesk.Viewing.Initializer(options, function onInitialized() {\n        //     viewerApp = new Autodesk.Viewing.ViewingApplication('MyViewerDiv' + $scope.uid);\n        //     viewerApp.registerViewer(viewerApp.k3D, Autodesk.Viewing.Private.GuiViewer3D, config3d);\n        //     viewerApp.loadDocument(documentId, onDocumentLoadSuccess, onDocumentLoadFailure);\n        //   });\n        // }\n        function init_autodesk(documentId) {\n          oViewer = new Autodesk.Viewing.Private.GuiViewer3D($(\"#MyViewerDiv\" + $scope.uid)[0], config); // With toolbar\n\n          Autodesk.Viewing.Initializer(options, function onInitialized() {\n            oViewer.initialize();\n            console.log(options.docid);\n            oViewer.loadModel(options.docid, config, onItemLoadSuccess, onDocumentLoadFailure);\n            $scope.oviewer = oViewer;\n            // for (var i = 0; i < docs.length; i++) {\n            //   var r = $('<div><button id=\"view_' + i + '\">' + docs[i].name + '<div><img id=\"img__' + i + '\" src=\"' + docs[i].path + '.png\"></div></button></div>');\n            //   $('#list').append(r);\n            //   $('#view_' + i).click(function (e) {\n            //     e.stopPropagation();\n            //     // oViewer.impl.unloadCurrentModel () ; API would be tearDown()/setUp() tearDown() unloads extensions too, so you need\n            //     // setUp() after that to load again setUp() requires the viewer configuration again, the one you use to start the\n            //     // viewer.\n            //     oViewer.tearDown();\n            //     oViewer.setUp({\n            //       env: 'Local'\n            //     });\n            //     var i = parseInt(e.target.id.substring(5));\n            //     oViewer.loadModel(docs[i].path, config, onItemLoadSuccess, onDocumentLoadFailure);\n            //     // oViewer.loadModel(docs[i].path);\n            //   });\n            // }\n\n            // viewerApp = new Autodesk.Viewing.ViewingApplication('MyViewerDiv');\n            // oViewer.registerViewer(oViewer.k3D, Autodesk.Viewing.Private.GuiViewer3D, config);\n            // viewerApp.loadDocument(documentId, onDocumentLoadSuccess, onDocumentLoadFailure);\n          });\n        }\n\n\n        // function onDocumentLoadSuccess(doc) {\n        //   viewables = viewerApp.bubble.search({\n        //     'type': 'geometry',\n        //     'role': '3d'\n        //   });\n        //   if (viewables.length === 0) {\n        //     console.error('Document contains no viewables.');\n        //     return;\n        //   }\n        //   viewerApp.selectItem(viewables[viewables.length - 1].data, onItemLoadSuccess, onItemLoadFail);\n        // }\n\n\n        function onDocumentLoadFailure(viewerErrorCode) {\n          console.error('onDocumentLoadFailure() - errorCode:' + viewerErrorCode);\n        }\n\n\n        function onItemLoadSuccess(viewer, item) {\n          viewer.scope = $scope;\n          // console.log('Viewers are equal: ' + (viewer === viewerApp.getCurrentViewer()));\n          oViewer.addEventListener(Autodesk.Viewing.GEOMETRY_LOADED_EVENT, function onGeometryLoadEvent() {\n            oViewer.removeEventListener(Autodesk.Viewing.GEOMETRY_LOADED_EVENT, onGeometryLoadEvent);\n            let extensions = spinalRegisterViewerPlugin.get();\n            for (var i = 0; i < extensions.length; i++) {\n              oViewer.loadExtension(extensions[i], options);\n            }\n            // var spinalExtension = oViewer.getExtension(\"SpinalCom.Forge.Extension\");\n            // if (typeof spinalExtension != 'undefined')\n            //   spinalExtension.mainPanel.setBuilding(Building);\n          });\n\n\n        }\n\n\n        // function onItemLoadFail(errorCode) {\n        //   console.error('onItemLoadFail() - errorCode:' + errorCode);\n        // }\n\n      });\n\n\n    }\n  ]);",
    "angular.module('app.controllers')\n  .controller('loginCtrl', [\"$scope\", \"authService\", \"$mdToast\", \"$location\",\n    function ($scope, authService, $mdToast, $location) {\n      let toast = $mdToast.simple()\n        .hideDelay(3000);\n      let user = authService.get_user();\n      authService.logout();\n      $scope.conf = {\n        email: \"\",\n        password: \"\"\n      };\n      $scope.ConnectBtn = () => {\n        authService.login($scope.conf.email, $scope.conf.password).then(\n          () => {\n            $location.path('/home');\n          },\n          (err) => {\n            toast.textContent(err);\n            $mdToast.show(toast);\n          }\n        );\n      };\n\n    }\n  ]);",
    "angular.module('app.controllers')\n  .controller('mainCtrl', [\"$scope\", \"$routeParams\", \"goldenLayoutService\", \"spinalModelDictionary\",\n    function ($scope, $routeParams, goldenLayoutService, spinalModelDictionary) {\n      goldenLayoutService.init();\n    }\n  ]);",
    "angular.module('app.controllers')\n  .controller('navbarCtrl', [\"$scope\", \"authService\", \"$location\", \"$routeParams\",\n    function ($scope, authService, $location, $routeParams) {\n      $scope.username = \"\";\n      $scope.connected = false;\n      authService.wait_connect().then(() => {\n        $scope.username = authService.get_user().username;\n        $scope.connected = true;\n        $scope.viewer = $routeParams.filepath;\n        if ($scope.viewer) {\n          $scope.viewer = atob($scope.viewer);\n        } else {\n          $scope.viewer = \"viewer\";\n        }\n        console.log($routeParams.filepath);\n\n      });\n      $scope.logout = () => {\n        $location.path('/login');\n      };\n      // get in SpinalDrive_Env\n      $scope.layouts = [\n\n        {\n          id: \"drag-viewer\",\n          name: \"viewer\",\n          cfg: {\n            isClosable: true,\n            title: \"viewer\",\n            type: 'component',\n            componentName: 'SpinalHome',\n            componentState: {\n              template: 'forgeviewer.html',\n              controller: 'forgeViewerCtrl'\n            }\n          }\n        },\n\n\n      ];\n\n\n\n\n\n    }\n  ]);",
    "angular.module('app.directives')\n  .directive(\"navbar\", [\n    function () {\n      return {\n        restrict: 'E',\n        templateUrl: 'app/templates/navbar.html',\n        controller: 'navbarCtrl',\n      };\n    }\n  ])\n  .directive(\"menuGlayout\", ['goldenLayoutService', '$timeout',\n    function (goldenLayoutService, $timeout) {\n      return {\n        restrict: 'E',\n        scope: {\n          layoutInfo: '=info'\n        },\n        replace: true,\n        template: '<li ng-repeat=\\\"layout in layoutInfo\\\"  id=\\\"{{layout.id}}\\\"><a >{{layout.name}}</a></li>',\n        link: (scope, element, attrs) => {\n          goldenLayoutService.wait_ready().then(() => {\n            let create_callback = (goldenLayoutService, layout) => {\n              return () => {\n                goldenLayoutService.createChild(layout.cfg);\n              };\n            };\n            for (var i = 0; i < scope.layoutInfo.length; i++) {\n              let layout = scope.layoutInfo[i];\n              goldenLayoutService.createDragSource($(\"#\" + layout.id)[0], layout.cfg);\n              $(\"#\" + layout.id).click(create_callback(goldenLayoutService, layout));\n            }\n          });\n        }\n      };\n    }\n  ])\n  .directive('ngRightClick', [\"$parse\", function ($parse) {\n    return function (scope, element, attrs) {\n      var fn = $parse(attrs.ngRightClick);\n      element.bind('contextmenu', function (event) {\n        scope.$apply(function () {\n          event.preventDefault();\n          fn(scope, {\n            $event: event\n          });\n        });\n      });\n    };\n  }]);",
    "let appSpinalforgePlugin = angular.module('app.spinalforge.plugin');\nappSpinalforgePlugin.run([\"$rootScope\", \"$compile\", \"$templateCache\", \"$http\", \"spinalRegisterViewerPlugin\",\n    function ($rootScope, $compile, $templateCache, $http, spinalRegisterViewerPlugin) {\n      // spinalRegisterViewerPlugin.register(\"PannelAnnotation\");\n      // var extensions = ['PannelAnnotation', \"Autodesk.ADN.Viewing.Extension.Color\"];\n\n      let load_template = (uri, name) => {\n        $http.get(uri).then((response) => {\n          $templateCache.put(name, response.data);\n        }, (errorResponse) => {\n          console.log('Cannot load the file ' + uri);\n        });\n      };\n      let toload = [{\n        uri: 'app/templates/annotationTemplate.html',\n        name: 'annotationTemplate.html'\n      }];\n      for (var i = 0; i < toload.length; i++) {\n        load_template(toload[i].uri, toload[i].name);\n      }\n\n\n      class PannelAnnotation {\n        constructor(viewer, options) {\n          Autodesk.Viewing.Extension.call(this, viewer, options);\n          this.viewer = viewer;\n          this.panel = null;\n        }\n\n        load() {\n          if (this.viewer.toolbar) {\n            this.createUI();\n          } else {\n            this.onToolbarCreatedBinded = this.onToolbarCreated.bind(this);\n            this.viewer.addEventListener(av.TOOLBAR_CREATED_EVENT, this.onToolbarCreatedBinded);\n          }\n          return true;\n        }\n\n        onToolbarCreated() {\n          this.viewer.removeEventListener(av.TOOLBAR_CREATED_EVENT, this.onToolbarCreatedBinded);\n          this.onToolbarCreatedBinded = null;\n          this.createUI();\n        }\n\n        unload() {\n          this.viewer.toolbar.removeControl(this.subToolbar);\n          return true;\n        }\n\n        createUI() {\n          var title = 'Annotation';\n          this.panel = new PanelClass(this.viewer, title);\n          var button1 = new Autodesk.Viewing.UI.Button('Annotation');\n\n          button1.onClick = (e) => {\n            if (!this.panel.isVisible()) {\n              this.panel.setVisible(true);\n            } else {\n              this.panel.setVisible(false);\n            }\n          };\n\n          button1.addClass('fa');\n          button1.addClass('fa-pencil');\n          button1.addClass('fa-2x');\n          button1.setToolTip('Annotation');\n\n          this.subToolbar = this.viewer.toolbar.getControl(\"my-Annotation\");\n          if (!this.subToolbar) {\n            this.subToolbar = new Autodesk.Viewing.UI.ControlGroup('my-Annotation');\n            this.viewer.toolbar.addControl(this.subToolbar);\n          }\n          this.subToolbar.addControl(button1);\n          this.initialize();\n        }\n\n        initialize() {\n          var _container = document.createElement('div');\n          _container.style.height = \"calc(100% - 45px)\";\n          _container.style.overflowY = 'auto';\n          this.panel.container.appendChild(_container);\n\n          $(_container).html(\"<div ng-controller=\\\"annotationCtrl\\\" ng-cloak>\" +\n            $templateCache.get(\"annotationTemplate.html\") + \"</div>\");\n          $compile($(_container).contents())($rootScope);\n        }\n      } // end class\n      Autodesk.Viewing.theExtensionManager.registerExtension('PannelAnnotation', PannelAnnotation);\n    } // end run\n  ])\n  .controller('annotationCtrl', [\"$scope\", \"$rootScope\", \"$mdDialog\", \"authService\", \"$compile\", \"$injector\", \"layout_uid\", \"spinalModelDictionary\", \"$q\",\n    function ($scope, $rootScope, $mdDialog, authService, $compile, $injector, layout_uid, spinalModelDictionary, $q) {\n      $scope.headerBtnClick = (btn) => {\n        console.log(\"headerBtnClick\");\n        console.log(btn);\n      };\n      $scope.headerBtn = [{\n          label: \"add note\",\n          icon: \"note_add\"\n        },\n        {\n          label: \"visibility\",\n          icon: \"visibility\",\n          toggleIcon: \"\"\n        },\n        {\n          label: \"visibility cancel\",\n          icon: \"visibility_off\"\n        },\n      ];\n      $scope.currentVisibleObj = [];\n\n      // {\n      // id: '',\n      // title: '',\n      // color: '',\n      // owner: '',\n      // username : '',\n      // date: Date.now(),\n      // allObject: [],\n      // notes : [],\n      // view : false,\n      // files : new Directory()\n      // }\n      $scope.notes = [];\n      spinalModelDictionary.init().then((m) => {\n        if (m) {\n          if (m.annotationPlugin) {\n            m.annotationPlugin.load((mod) => {\n              $scope.noteListModel = mod;\n              $scope.noteListModel.bind($scope.onModelChange);\n            });\n          } else {\n            $scope.noteListModel = new Lst();\n            m.add_attr({\n              annotationPlugin: new Ptr($scope.noteListModel)\n            });\n            $scope.noteListModel.bind($scope.onModelChange);\n          }\n        }\n      });\n\n      function deferObjRdy(model, promise) {\n        if (FileSystem._tmp_objects[model._server_id]) {\n          setTimeout(() => {\n            deferObjChange(model, promise);\n          }, 200);\n          return;\n        }\n        promise.resolve(model);\n      }\n\n      $scope.waitObjRdy = (model) => {\n        let deferred = $q.defer();\n        deferObjRdy(model, deferred);\n        return deferred.promise;\n      };\n\n      $scope.onModelChange = () => {\n        $scope.notes = [];\n        let promiseLst = [];\n        for (var i = 0; i < $scope.noteListModel.length; i++) {\n          let note = $scope.noteListModel[i];\n          promiseLst.push($scope.waitObjRdy(note));\n        }\n        $q.all(promiseLst).then((res) => {\n          $scope.notes = [];\n          for (var i = 0; i < $scope.noteListModel.length; i++) {\n            let note = $scope.noteListModel[i];\n            let mod = note.get();\n            mod._server_id = note._server_id;\n            $scope.notes.push(mod);\n            if ($scope.selectedNote && $scope.selectedNote._server_id == mod._server_id) {\n              $scope.selectedNote = mod;\n            }\n            console.log($scope.oviewer);\n            // $scope.$apply();\n\n            // chcck if aplly color\n          }\n        });\n      };\n\n      $scope.$on('colorpicker-closed', function () {\n        // update moedels via $scope.notes\n        for (var i = 0; i < $scope.notes.length; i++) {\n          let note = $scope.notes[i];\n          let mod = FileSystem._objects[note._server_id];\n          if (mod && mod.color.get() !== note.color) {\n            mod.color.set(note.color);\n          }\n        }\n      });\n\n      $scope.selectedNote = null;\n      $scope.selectedStyle = (note) => {\n        return note === $scope.selectedNote ? \"background-color: #4185f4\" : '';\n      };\n      $scope.getViewIcon = (note) => {\n        return note.view ? \"visibility\" : \"visibility_off\";\n      };\n\n      $scope.selectNote = (note) => {\n        $scope.selectedNote = note;\n      };\n      $scope.renameNote = (note) => {\n        $mdDialog.show($mdDialog.prompt()\n            .title(\"Rename Note\")\n            .placeholder('Please enter the title')\n            .ariaLabel('Rename Note')\n            .clickOutsideToClose(true)\n            .required(true)\n            .ok('Confirm').cancel('Cancel'))\n          .then(function (result) {\n            let mod = FileSystem._objects[note._server_id];\n            if (mod) {\n              mod.title.set(result);\n            }\n          }, () => {});\n      };\n      $scope.toggleViewNote = (note) => {\n        note.view = !note.view;\n      };\n      $scope.addModelInNote = (note) => {\n\n      };\n      $scope.deleteNote = (note) => {\n\n      };\n      $scope.chatNote = (note) => {\n\n      };\n\n\n\n\n\n\n\n\n      // changeItemColor(id) {\n      //   var ids = [];\n      //   var selected;\n      //   var notes = this.model;\n      //   for (var i = 0; i < notes.length; i++) {\n      //     if (notes[i].id == id) {\n      //       selected = notes[i];\n      //       for (var j = 0; j < selected.allObject.length; j++) {\n\n      //         ids.push(selected.allObject[j].dbId.get());\n      //       }\n      //     }\n      //   }\n      //   this.viewer.setColorMaterial(ids, selected.color.get(), selected.id.get());\n      // }\n\n      // restoreColor(id) {\n      //   var ids = [];\n      //   var selected;\n      //   var notes = this.model;\n      //   for (var i = 0; i < notes.length; i++) {\n      //     if (notes[i].id == id) {\n      //       selected = notes[i];\n      //       for (var j = 0; j < selected.allObject.length; j++) {\n      //         ids.push(selected.allObject[j].dbId.get());\n      //       }\n      //     }\n      //   }\n      //   this.viewer.restoreColorMaterial(ids, id);\n      // }\n\n      // changeAllItemsColor() {\n      //   var objects = [];\n      //   var notes = this.model;\n      //   for (var i = 0; i < notes.length; i++) {\n      //     var ids = [];\n      //     var color;\n      //     for (var j = 0; j < notes[i].allObject.length; j++) {\n      //       ids.push(notes[i].allObject[j].dbId.get());\n      //     }\n      //     color = notes[i].color.get();\n      //     objects.push({\n      //       ids: ids,\n      //       color: color,\n      //       id: notes[i].id\n      //     });\n      //   }\n      //   this.viewer.colorAllMaterials(objects);\n      // }\n\n      // restoreAllItemsColor() {\n      //   var objects = [];\n      //   var notes = this.model;\n      //   for (var i = 0; i < notes.length; i++) {\n      //     var ids = [];\n\n      //     for (var j = 0; j < notes[i].allObject.length; j++) {\n      //       ids.push(notes[i].allObject[j].dbId.get());\n      //     }\n      //     objects.push({\n      //       ids: ids,\n      //       id: notes[i].id\n      //     });\n      //   }\n      //   this.viewer.restoreAllMaterialColor(objects);\n      // }\n\n    }\n  ]);",
    "angular.module('app.spinalcom')\n  .factory('authService', [\"$q\", \"ngSpinalCore\", \"config\", \"$http\",\n    function ($q, ngSpinalCore, config, $http) {\n      let factory = {};\n      let user = {\n        username: \"\",\n        password: \"\",\n        id : \"\"\n      };\n      let is_Connected = false;\n      factory.save_user = (username, password, id) => {\n        user.username = username;\n        user.password = password;\n        user.id = id;\n        window.localStorage.setItem(\"spinalhome_cfg\", btoa(JSON.stringify(user)));\n      };\n      factory.get_user = () => {\n        let _user = window.localStorage.getItem(\"spinalhome_cfg\");\n        if (_user) {\n          user = JSON.parse(atob(_user));\n        }\n        return user;\n      };\n\n      factory.logout = (username, password) => {\n        if (user.username != \"\") {\n          factory.save_user(\"\", \"\",\"\");\n          location.reload();\n        }\n      };\n\n      factory.login = (username, password) => {\n        let deferred = $q.defer();\n        let url = \"/get_user_id\";\n        $http.get(url + \"?u=\" + username + \"&p=\" + password)\n          .then(function (data) {\n            var u = parseInt(data.data);\n            var i = 0;\n            if (u == -1) {\n              let msg = (\"Login Error: username / password pair not found.\");\n              // $mdToast.show(loginError_toast)\n              deferred.reject(msg);\n              for (i = 0; i < wait_connectList.length; i++) {\n                wait_connectList[i].reject();\n              }\n              wait_connectList = [];\n              return;\n            }\n            ngSpinalCore.connect(\"http://\" + u + \":\" + password +\n              \"@\" + config.spinalhub_url + \":\" + config.spinalhub_port + \"/\");\n            factory.save_user(username, password,u);\n            is_Connected = true;\n            deferred.resolve();\n            for (i = 0; i < wait_connectList.length; i++) {\n              wait_connectList[i].resolve();\n            }\n            wait_connectList = [];\n          }, function (data) {\n            let msg = ('Connection Error: Imposible to connect to the server.');\n            // $mdToast.show(connectionError_toast)\n            deferred.reject(msg);\n            for (var i = 0; i < wait_connectList.length; i++) {\n              wait_connectList[i].reject();\n            }\n            wait_connectList = [];\n          });\n        return deferred.promise;\n      };\n\n      factory.is_Connected = () => {\n        return is_Connected;\n      };\n      let wait_connectList = [];\n      factory.wait_connect = () => {\n        let deferred = $q.defer();\n        if (is_Connected == true) {\n          deferred.resolve();\n        } else\n          wait_connectList.push(deferred);\n        return deferred.promise;\n      };\n\n      return factory;\n    }\n  ]);",
    "angular.module('app.services')\n  .factory('goldenLayoutService', ['$q', '$window', '$templateCache', '$rootScope', '$compile',\n    function ($q, $window, $templateCache, $rootScope, $compile) {\n      var config = {\n        content: [{\n          type: 'row',\n          content: [{\n            isClosable: false,\n            title: \"Viewer\",\n            type: 'component',\n            componentName: 'SpinalHome',\n            componentState: {\n              template: 'forgeviewer.html',\n              controller: 'forgeViewerCtrl'\n            }\n          }]\n        }]\n      };\n      let myLayout = 0;\n      let factory = {};\n      factory.init = () => {\n        if (myLayout == 0) {\n          myLayout = new GoldenLayout(config, $(\"#g-layout\"));\n          myLayout.registerComponent('SpinalHome', function (container, state) {\n            var element = container.getElement();\n            if (state.template == '') {\n\n              element.html();\n              $compile(element.contents())($rootScope);\n            } else {\n              element.html(\"<div class=\\\"gpannel-content\\\" ng-controller=\\\"\" + state.controller + \"\\\" ng-cloak>\" +\n                $templateCache.get(state.template) + \"</div>\");\n              $compile(element.contents())($rootScope);\n            }\n          });\n\n          myLayout.init();\n          angular.element($window).bind('resize', function () {\n            myLayout.updateSize();\n          });\n          $rootScope.$emit(\"GoldenLayout_READY\");\n        }\n      };\n\n      factory.wait_ready = () => {\n        return $q(function (resolve, reject) {\n          $rootScope.$on(\"GoldenLayout_READY\", () => {\n            resolve();\n          });\n        });\n      };\n\n\n\n      factory.createChild = (config) => {\n        myLayout.root.contentItems[0].addChild(config);\n      };\n\n      factory.createDragSource = (element, config) => {\n        myLayout.createDragSource(element, config);\n\n      };\n\n\n      return factory;\n    }\n  ])\n  .factory('layout_uid', function () {\n    let uid = 0;\n    return ({\n      get: () => {\n        let id = uid++;\n        return id;\n      }\n    });\n  })\n  .factory('spinalRegisterViewerPlugin', function () {\n    let plugin = [];\n    return ({\n      get: () => {\n        return plugin;\n      },\n      register: (name) => {\n        for (var i = 0; i < plugin.length; i++) {\n          if (plugin[i] === name) {\n            return;\n          }\n        }\n        plugin.push(name);\n      }\n    });\n  });",
    "angular.module('app.spinalcom')\n  .factory('ngSpinalCore', ['$q', function ($q) {\n    var service = {};\n    service.conn = 0;\n\n    service.connect = function (option) {\n      service.conn = spinalCore.connect(option);\n    };\n    service.store = function (model, path) {\n      var deferred = $q.defer();\n      spinalCore.store(service.conn, model, path, function (model) {\n        deferred.resolve(model);\n      }, function () {\n        deferred.reject();\n      });\n      return deferred.promise;\n    };\n    service.load = function (path) {\n      var deferred = $q.defer();\n      spinalCore.load(service.conn, path, function (model) {\n        deferred.resolve(model);\n      }, function () {\n        deferred.reject();\n      });\n      return deferred.promise;\n    };\n    service.load_type = function (model, path) {\n      var deferred = $q.defer();\n      spinalCore.load_type(service.conn, model, path, function (model) {\n        deferred.resolve(model);\n      }, function () {\n        deferred.reject();\n      });\n      return deferred.promise;\n    };\n    service.load_right = function (ptr) {\n      var deferred = $q.defer();\n      spinalCore.load_right(service.conn, ptr, function (model) {\n        deferred.resolve(model);\n      }, function () {\n        deferred.reject();\n      });\n      return deferred.promise;\n    };\n    service.share_model = function (data, filename, flag, target_username) {\n      return spinalCore.share_model(service.conn, data, filename, flag, target_username);\n    };\n    return service;\n  }]);",
    "angular.module('app.spinalcom')\n  .factory('spinalModelDictionary', [\"$q\", \"ngSpinalCore\", \"config\", \"authService\", \"$routeParams\", \"$location\",\n    function ($q, ngSpinalCore, config, authService, $routeParams, $location) {\n      let factory = {};\n      factory.model = 0;\n      factory.init = () => {\n        var deferred = $q.defer();\n        if (factory.model == 0) {\n          authService.wait_connect().then(() => {\n            let user = authService.get_user();\n            let path = $routeParams.filepath;\n            console.log(path)\n            if (path) {\n              path = atob(path);\n              ngSpinalCore.load(path).then((m) => {\n                factory.model = m;\n                console.log(m);\n                deferred.resolve(m);\n\n              }, () => {\n                let msg = \"not able to load : \" + path;\n                console.error(msg);\n                $location.replace('/drive/');\n                deferred.reject(msg);\n              });\n            }\n          }, () => {\n            let msg = \"not able to load : \" + path;\n            console.error(msg);\n            $location.replace('/drive/');\n            deferred.reject(msg);\n          });\n        } else\n          deferred.resolve(factory.model);\n        return deferred.promise;\n      };\n      return factory;\n    }\n  ]);"
  ]
}